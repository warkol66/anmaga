<?php

  // include base peer class
  require_once 'om/BaseUserByAffiliatePeer.php';
  
  // include object class
  include_once 'UserByAffiliate.php';


/**
 * Skeleton subclass for performing query and update operations on the 'users_userbyaffiliate' table.
 *
 * Usuarios de afiliado
 *
 * This class was autogenerated by Propel on:
 *
 * 12/27/06 11:08:05
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer
 */	
class UserByAffiliatePeer extends BaseUserByAffiliatePeer {

	  function getUsersByAffiliate($affiliateId) {
		$cond = new Criteria();
		$cond->add(UserByAffiliatePeer::AFFILIATEID,$affiliateId);
		$todosObj = UserByAffiliatePeer ::doSelect($cond);
		return $todosObj;
  }


	function getAll() {
		$cond = new Criteria();
		$todosObj = UserByAffiliatePeer::doSelect($cond);
		return $todosObj;
  }

	function insert($affiliateId,$username,$password,$levelId) {
	
		try{
		$document = new UserByAffiliate();
		$document->setUsername($username);
		$document->setAffiliateId($affiliateId);
		$document->setActive(1);
		$document->setCreated(now);
		$document->setUpdated(now);
		$document->setLevelId($levelId);
		if(!empty($password)){
			$document->setPassword(md5($password."ASD"));
		}
		$document->save();
		}catch (PropelException $e) {}
		return;
	}

  function auth($username,$password) {
		$cond = new Criteria();
		$cond->add(UserByAffiliatePeer::USERNAME, $username);
		$cond->add(UserByAffiliatePeer::ACTIVE, "1");
		$todosObj = UserByAffiliatePeer::doSelect($cond);	
		$user = $todosObj[0];
		if ( !empty($user) ) {
			if ( $user->getPassword() == md5($password."ASD") ) {
				return $user;
			}
		}
		return false;
  }

  function delete($id) {
		$affiliate = UserByAffiliatePeer::retrieveByPk($id);
		$affiliate->delete();
		return true;
  }




	function getUser($id) {
		   	$obj = UserByAffiliatePeer::retrieveByPK($id);
		return $obj;
	}


  function update($id,$affiliateId,$username,$password,$levelId) {
		$document = UserByAffiliatePeer::retrieveByPK($id);
		$document->setUsername($username);
		$document->setAffiliateId($affiliateId);
		$document->setActive(1);
		$document->setCreated(now);
		$document->setUpdated(now);
		$document->setLevelId($levelId);
		if(!empty($password)){
			$document->setPassword(md5($password."ASD"));
		}
		$document->save();
		return;
  }

} // UserByAffiliatePeer
