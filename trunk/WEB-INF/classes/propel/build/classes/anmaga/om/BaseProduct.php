<?php 

require_once 'propel/om/BaseObject.php';

 
require_once 'propel/om/Persistent.php';

 

include_once 'propel/util/Criteria.php';
 

// (on-demand) include_once 'anmaga/Unit.php';
// (on-demand) include_once 'anmaga/UnitPeer.php';
 

// (on-demand) include_once 'anmaga/MeasureUnit.php';
// (on-demand) include_once 'anmaga/MeasureUnitPeer.php';

include_once 'anmaga/ProductPeer.php';

/**
 * Base class that represents a row from the 'product' table.
 *
 * Producto 
 *
 * This class was autogenerated by Propel on:
 *
 * [05/14/07 17:23:25]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to Product class. 
 * 
 * @package anmaga 
 */
abstract class BaseProduct extends BaseObject implements Persistent {
	
	/** 
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var ProductPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var int	  
	 */
	protected $id;	

	/**
	 * The value for the code field.
	 * @var string	  
	 */
	protected $code;	

	/**
	 * The value for the description field.
	 * @var string	  
	 */
	protected $description;	

	/**
	 * The value for the price field.
	 * @var double	  
	 */
	protected $price;	

	/**
	 * The value for the unitid field.
	 * @var int	  
	 */
	protected $unitid;	

	/**
	 * The value for the measureunitid field.
	 * @var int	  
	 */
	protected $measureunitid;	
  
	/**
	 * Get the Id column value.
	 * Id del producto 
	 * @return int	  
	 */
	public function getId()
	{
		return $this->id;
	}


	/**
	 * Set the value of `id` column.	  
	 * Id del producto 
	 * @param int $v new value
	 * @return void
	 * @throws PropelException 
	 */
	public function setId($v)
	{
		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProductPeer::ID;
		}
			
		  // update associated OrderItem		  
		  if ($this->collOrderItems !== null) {
			  for ($i=0,$size=count($this->collOrderItems); $i < $size; $i++) {
				  $this->collOrderItems[$i]->setProductid($v);
			  }
		  }
			  	
		  // update associated OrderTemplateItem		  
		  if ($this->collOrderTemplateItems !== null) {
			  for ($i=0,$size=count($this->collOrderTemplateItems); $i < $size; $i++) {
				  $this->collOrderTemplateItems[$i]->setProductid($v);
			  }
		  }
			  		
	}

  
	/**
	 * Get the Code column value.
	 * Codigo del producto 
	 * @return string	  
	 */
	public function getCode()
	{
		return $this->code;
	}


	/**
	 * Set the value of `code` column.	  
	 * Codigo del producto 
	 * @param string $v new value
	 * @return void
	 *  
	 */
	public function setCode($v)
	{
		if ($this->code !== $v) {
			$this->code = $v;
			$this->modifiedColumns[] = ProductPeer::CODE;
		}
				
	}

  
	/**
	 * Get the Description column value.
	 * Descripcion 
	 * @return string	  
	 */
	public function getDescription()
	{
		return $this->description;
	}


	/**
	 * Set the value of `description` column.	  
	 * Descripcion 
	 * @param string $v new value
	 * @return void
	 *  
	 */
	public function setDescription($v)
	{
		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = ProductPeer::DESCRIPTION;
		}
				
	}

  
	/**
	 * Get the Price column value.
	 * Precio del producto 
	 * @return double	  
	 */
	public function getPrice()
	{
		return $this->price;
	}


	/**
	 * Set the value of `price` column.	  
	 * Precio del producto 
	 * @param double $v new value
	 * @return void
	 *  
	 */
	public function setPrice($v)
	{
		if ($this->price !== $v) {
			$this->price = $v;
			$this->modifiedColumns[] = ProductPeer::PRICE;
		}
				
	}

  
	/**
	 * Get the Unitid column value.
	 * Unidades 
	 * @return int	  
	 */
	public function getUnitid()
	{
		return $this->unitid;
	}


	/**
	 * Set the value of `unitid` column.	  
	 * Unidades 
	 * @param int $v new value
	 * @return void
	 * @throws PropelException 
	 */
	public function setUnitid($v)
	{
		if ($this->unitid !== $v) {
			$this->unitid = $v;
			$this->modifiedColumns[] = ProductPeer::UNITID;
		}
			
		if ($this->aUnit !== null && $this->aUnit->getId() !== $v) {
			$this->aUnit = null;
		}
			
	}

  
	/**
	 * Get the Measureunitid column value.
	 * Unidad de Medida 
	 * @return int	  
	 */
	public function getMeasureunitid()
	{
		return $this->measureunitid;
	}


	/**
	 * Set the value of `measureunitid` column.	  
	 * Unidad de Medida 
	 * @param int $v new value
	 * @return void
	 * @throws PropelException 
	 */
	public function setMeasureunitid($v)
	{
		if ($this->measureunitid !== $v) {
			$this->measureunitid = $v;
			$this->modifiedColumns[] = ProductPeer::MEASUREUNITID;
		}
			
		if ($this->aMeasureUnit !== null && $this->aMeasureUnit->getId() !== $v) {
			$this->aMeasureUnit = null;
		}
			
	}


	
	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return void
	 * @throws PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {
			$this->id = $rs->getInt($startcol + 0);					
			$this->code = $rs->getString($startcol + 1);					
			$this->description = $rs->getString($startcol + 2);					
			$this->price = $rs->getFloat($startcol + 3);					
			$this->unitid = $rs->getInt($startcol + 4);					
			$this->measureunitid = $rs->getInt($startcol + 5);					
			 
			$this->resetModified();
			$this->setNew(false);
		
		} catch (Exception $e) {
			throw new PropelException("Error populating Product object", $e);
		}		
	
	}
	
	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 * 
	 * @return Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{		
		$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		$criteria->add(ProductPeer::ID, $this->id);
		return $criteria;			
	}
	
	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{		
		$criteria = new Criteria(ProductPeer::DATABASE_NAME);
		if ($this->isColumnModified(ProductPeer::ID)) $criteria->add(ProductPeer::ID, $this->id);
		if ($this->isColumnModified(ProductPeer::CODE)) $criteria->add(ProductPeer::CODE, $this->code);
		if ($this->isColumnModified(ProductPeer::DESCRIPTION)) $criteria->add(ProductPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(ProductPeer::PRICE)) $criteria->add(ProductPeer::PRICE, $this->price);
		if ($this->isColumnModified(ProductPeer::UNITID)) $criteria->add(ProductPeer::UNITID, $this->unitid);
		if ($this->isColumnModified(ProductPeer::MEASUREUNITID)) $criteria->add(ProductPeer::MEASUREUNITID, $this->measureunitid);
		return $criteria;			
	}
	
	

	/**
	 * @var Unit	  
	 */
	protected $aUnit;

	/**
	 * Declares an association between this object and a Unit object
	 *
	 * @param Unit $v
	 * @return void
	 * @throws PropelException
	 */
	public function setUnit($v)
	{
			
		if ($v === null) {
			$this->setUnitid(NULL);
		} else {
			$this->setUnitid($v->getId());
		}
   
		$this->aUnit = $v;
	}


	/**
	 * Get the associated Unit object
	 *
	 * @param Connection Optional Connection object.
	 * @return Unit The associated Unit object.
	 * @throws PropelException
	 */
	public function getUnit($con = null)
	{
		// include the Peer class
		include_once 'anmaga/UnitPeer.php';

		if ($this->aUnit === null && ($this->unitid !== null)) {
	
			$this->aUnit = UnitPeer::retrieveByPK($this->unitid, $con);
	
			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = UnitPeer::retrieveByPK($this->unitid, $con);
			   $obj->addProducts($this);
			 */
		}
		return $this->aUnit;
	}

	/**
	 * Provides convenient way to set a relationship based on a
	 * key.  e.g.
	 * <code>$bar->setFooKey($foo->getPrimaryKey())</code>
	 *
 
	 * @return void
	 * @throws PropelException
	 */
	public function setUnitKey($key)
	{

		$this->setUnitid( (int) $key);			
		
	}

	/**
	 * @var MeasureUnit	  
	 */
	protected $aMeasureUnit;

	/**
	 * Declares an association between this object and a MeasureUnit object
	 *
	 * @param MeasureUnit $v
	 * @return void
	 * @throws PropelException
	 */
	public function setMeasureUnit($v)
	{
			
		if ($v === null) {
			$this->setMeasureunitid(NULL);
		} else {
			$this->setMeasureunitid($v->getId());
		}
   
		$this->aMeasureUnit = $v;
	}


	/**
	 * Get the associated MeasureUnit object
	 *
	 * @param Connection Optional Connection object.
	 * @return MeasureUnit The associated MeasureUnit object.
	 * @throws PropelException
	 */
	public function getMeasureUnit($con = null)
	{
		// include the Peer class
		include_once 'anmaga/MeasureUnitPeer.php';

		if ($this->aMeasureUnit === null && ($this->measureunitid !== null)) {
	
			$this->aMeasureUnit = MeasureUnitPeer::retrieveByPK($this->measureunitid, $con);
	
			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = MeasureUnitPeer::retrieveByPK($this->measureunitid, $con);
			   $obj->addProducts($this);
			 */
		}
		return $this->aMeasureUnit;
	}

	/**
	 * Provides convenient way to set a relationship based on a
	 * key.  e.g.
	 * <code>$bar->setFooKey($foo->getPrimaryKey())</code>
	 *
 
	 * @return void
	 * @throws PropelException
	 */
	public function setMeasureUnitKey($key)
	{

		$this->setMeasureunitid( (int) $key);			
		
	}

	/**
	 * Collection to store aggregation of collOrderItems	  
	 * @var array
	 */
	protected $collOrderItems; 

	/**
	 * Temporary storage of collOrderItems to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return void
	 */
	public function initOrderItems()
	{
		if ($this->collOrderItems === null) {
			$this->collOrderItems = array();
		}
	}

	/**
	 * Method called to associate a OrderItem object to this object
	 * through the OrderItem foreign key attribute
	 *
	 * @param OrderItem $l $className
	 * @return void
	 * @throws PropelException
	 */
	public function addOrderItem(OrderItem $l)
	{
		$this->collOrderItems[] = $l;
		$l->setProduct($this);
	}

	/**
	 * The criteria used to select the current contents of collOrderItems.
	 * @var Criteria
	 */
	private $lastOrderItemsCriteria = null;

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Product has previously
	 * been saved, it will retrieve related OrderItems from storage.
	 * If this Product is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param Connection $con
	 * @param Criteria $criteria
	 * @throws PropelException
	 */
	public function getOrderItems($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/OrderItemPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
				
		if ($this->collOrderItems === null) {
			if ($this->isNew()) {
			   $this->collOrderItems = array();
			} else {
	
				$criteria->add(OrderItemPeer::PRODUCTID, $this->getId() );

				$this->collOrderItems = OrderItemPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.

				$criteria->add(OrderItemPeer::PRODUCTID, $this->getId());

				if (!isset($this->lastOrderItemsCriteria) || !$this->lastOrderItemsCriteria->equals($criteria)) {
					$this->collOrderItems = OrderItemPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderItemsCriteria = $criteria;

		return $this->collOrderItems;
	}
	

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Product is new, it will return
	 * an empty collection; or if this Product has previously
	 * been saved, it will retrieve related OrderItems from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Product.
	 */
	public function getOrderItemsJoinOrder($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/OrderItemPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		
		if ($this->collOrderItems === null) {
			if ($this->isNew()) {
			   $this->collOrderItems = array();
			} else {
	   
				$criteria->add(OrderItemPeer::PRODUCTID, $this->getId());
				$this->collOrderItems = OrderItemPeer::doSelectJoinOrder($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.
	  
			$criteria->add(OrderItemPeer::PRODUCTID, $this->getId());
			if (!isset($this->lastOrderItemsCriteria) || !$this->lastOrderItemsCriteria->equals($criteria)) {
				$this->collOrderItems = OrderItemPeer::doSelectJoinOrder($criteria, $con);
			}
		}
		$this->lastOrderItemsCriteria = $criteria;

		return $this->collOrderItems;
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Product is new, it will return
	 * an empty collection; or if this Product has previously
	 * been saved, it will retrieve related OrderItems from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Product.
	 */
	public function getOrderItemsJoinProduct($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/OrderItemPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		
		if ($this->collOrderItems === null) {
			if ($this->isNew()) {
			   $this->collOrderItems = array();
			} else {
	   
				$criteria->add(OrderItemPeer::PRODUCTID, $this->getId());
				$this->collOrderItems = OrderItemPeer::doSelectJoinProduct($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.
	  
			$criteria->add(OrderItemPeer::PRODUCTID, $this->getId());
			if (!isset($this->lastOrderItemsCriteria) || !$this->lastOrderItemsCriteria->equals($criteria)) {
				$this->collOrderItems = OrderItemPeer::doSelectJoinProduct($criteria, $con);
			}
		}
		$this->lastOrderItemsCriteria = $criteria;

		return $this->collOrderItems;
	}

	/**
	 * Collection to store aggregation of collOrderTemplateItems	  
	 * @var array
	 */
	protected $collOrderTemplateItems; 

	/**
	 * Temporary storage of collOrderTemplateItems to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return void
	 */
	public function initOrderTemplateItems()
	{
		if ($this->collOrderTemplateItems === null) {
			$this->collOrderTemplateItems = array();
		}
	}

	/**
	 * Method called to associate a OrderTemplateItem object to this object
	 * through the OrderTemplateItem foreign key attribute
	 *
	 * @param OrderTemplateItem $l $className
	 * @return void
	 * @throws PropelException
	 */
	public function addOrderTemplateItem(OrderTemplateItem $l)
	{
		$this->collOrderTemplateItems[] = $l;
		$l->setProduct($this);
	}

	/**
	 * The criteria used to select the current contents of collOrderTemplateItems.
	 * @var Criteria
	 */
	private $lastOrderTemplateItemsCriteria = null;

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Product has previously
	 * been saved, it will retrieve related OrderTemplateItems from storage.
	 * If this Product is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param Connection $con
	 * @param Criteria $criteria
	 * @throws PropelException
	 */
	public function getOrderTemplateItems($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/OrderTemplateItemPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
				
		if ($this->collOrderTemplateItems === null) {
			if ($this->isNew()) {
			   $this->collOrderTemplateItems = array();
			} else {
	
				$criteria->add(OrderTemplateItemPeer::PRODUCTID, $this->getId() );

				$this->collOrderTemplateItems = OrderTemplateItemPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.

				$criteria->add(OrderTemplateItemPeer::PRODUCTID, $this->getId());

				if (!isset($this->lastOrderTemplateItemsCriteria) || !$this->lastOrderTemplateItemsCriteria->equals($criteria)) {
					$this->collOrderTemplateItems = OrderTemplateItemPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderTemplateItemsCriteria = $criteria;

		return $this->collOrderTemplateItems;
	}
	

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Product is new, it will return
	 * an empty collection; or if this Product has previously
	 * been saved, it will retrieve related OrderTemplateItems from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Product.
	 */
	public function getOrderTemplateItemsJoinOrderTemplate($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/OrderTemplateItemPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		
		if ($this->collOrderTemplateItems === null) {
			if ($this->isNew()) {
			   $this->collOrderTemplateItems = array();
			} else {
	   
				$criteria->add(OrderTemplateItemPeer::PRODUCTID, $this->getId());
				$this->collOrderTemplateItems = OrderTemplateItemPeer::doSelectJoinOrderTemplate($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.
	  
			$criteria->add(OrderTemplateItemPeer::PRODUCTID, $this->getId());
			if (!isset($this->lastOrderTemplateItemsCriteria) || !$this->lastOrderTemplateItemsCriteria->equals($criteria)) {
				$this->collOrderTemplateItems = OrderTemplateItemPeer::doSelectJoinOrderTemplate($criteria, $con);
			}
		}
		$this->lastOrderTemplateItemsCriteria = $criteria;

		return $this->collOrderTemplateItems;
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Product is new, it will return
	 * an empty collection; or if this Product has previously
	 * been saved, it will retrieve related OrderTemplateItems from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Product.
	 */
	public function getOrderTemplateItemsJoinProduct($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/OrderTemplateItemPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		
		if ($this->collOrderTemplateItems === null) {
			if ($this->isNew()) {
			   $this->collOrderTemplateItems = array();
			} else {
	   
				$criteria->add(OrderTemplateItemPeer::PRODUCTID, $this->getId());
				$this->collOrderTemplateItems = OrderTemplateItemPeer::doSelectJoinProduct($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.
	  
			$criteria->add(OrderTemplateItemPeer::PRODUCTID, $this->getId());
			if (!isset($this->lastOrderTemplateItemsCriteria) || !$this->lastOrderTemplateItemsCriteria->equals($criteria)) {
				$this->collOrderTemplateItems = OrderTemplateItemPeer::doSelectJoinProduct($criteria, $con);
			}
		}
		$this->lastOrderTemplateItemsCriteria = $criteria;

		return $this->collOrderTemplateItems;
	}



 
	/**
	 * Removes this object from datastore and sets delete attribute.
	 * 
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 * @see BaseObject::setDeleted()
	 * @see BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{	
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}
		
		if ($con === null)
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME);

		try {
			$con->begin();
			ProductPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}
	

	/**
	 * flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	private $alreadyInSave = false;

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}
		
		if ($con === null)
			$con = Propel::getConnection(ProductPeer::DATABASE_NAME);

		try {
			$con->begin();
			$this->doSave($con);			
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}
  
	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.
	 *
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 */
		protected function doSave($con)	{ 
		
	 
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.
 
			if ($this->aUnit !== null) {
				if ($this->aUnit->isModified()) $this->aUnit->save($con);
				$this->setUnit($this->aUnit);
			}
 
			if ($this->aMeasureUnit !== null) {
				if ($this->aMeasureUnit->isModified()) $this->aMeasureUnit->save($con);
				$this->setMeasureUnit($this->aMeasureUnit);
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProductPeer::doInsert($this, $con);
					$this->setId( $pk );  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					ProductPeer::doUpdate($this, $con);
				}			
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}
			if ($this->collOrderItems !== null) {
				for ($i=0,$size=count($this->collOrderItems); $i < $size; $i++) {
					$this->collOrderItems[$i]->save($con);
				}
			  }
			if ($this->collOrderTemplateItems !== null) {
				for ($i=0,$size=count($this->collOrderTemplateItems); $i < $size; $i++) {
					$this->collOrderTemplateItems[$i]->save($con);
				}
			  }

			$this->alreadyInSave = false;
		}
	}

	/**
	 * Validates the objects modified field values.
	 * This includes all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param mixed $columns Column name or an array of column names.
	 *
	 * @return mixed <code>true</code> if all columns pass validation
	 *			  or an array of <code>ValidationFailed</code> objects for columns that fail.
	 */
	public function validate($columns = null)
	{
	  if ($columns)
	  {
		return ProductPeer::doValidate($this, $columns);
	  }

		return $this->doValidate();
	}

	/**
	 * flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	protected $alreadyInValidation = false;
  
	/**
	 * This function performs the validation work for complex object models.
	 * 
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate()
	{
		if (! $this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;
	  
			$failureMap = array();	  
	  
			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.
			if ($this->aUnit !== null) {
				if (($retval = $this->aUnit->validate()) !== true) {
					$failureMap = array_merge($failureMap, $retval);
				}
			}
			if ($this->aMeasureUnit !== null) {
				if (($retval = $this->aMeasureUnit->validate()) !== true) {
					$failureMap = array_merge($failureMap, $retval);
				}
			}

			if (($retval = ProductPeer::doValidate($this)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}
	  
			if ($this->collOrderItems !== null) {
				for ($i=0,$size=count($this->collOrderItems); $i < $size; $i++) {
					if (($retval = $this->collOrderItems[$i]->validate()) !== true) {
						$failureMap = array_merge($failureMap, $retval);
					}
				}
			}
			if ($this->collOrderTemplateItems !== null) {
				for ($i=0,$size=count($this->collOrderTemplateItems); $i < $size; $i++) {
					if (($retval = $this->collOrderTemplateItems[$i]->validate()) !== true) {
						$failureMap = array_merge($failureMap, $retval);
					}
				}
			}
	  
			$this->alreadyInValidation = false;
		}
	
		return (!empty($failureMap) ? $failureMap : true);
	}
  

	/**
	 * Set the PrimaryKey.
	 *
	 * @param mixed id Primary key.
	 * @return void
	 * @throws PropelException	 */
	public function setPrimaryKey($key) 
	{		
		$this->setId($key);
	}
	

	/**
	 * Returns an id that differentiates this object from others
	 * of its class.
	 * @return int 
	 */
	public function getPrimaryKey()
	{

		return $this->getId();

	}

	
	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *  
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 *  
	 * @return Product Clone of current object.
	 * @throws PropelException
	 */
	public function copy($deepCopy = false) 
	{
		$copyObj = new Product();
		$copyObj->setCode($this->code);
		$copyObj->setDescription($this->description);
		$copyObj->setPrice($this->price);
		$copyObj->setUnitid($this->unitid);
		$copyObj->setMeasureunitid($this->measureunitid);

		if ($deepCopy) {		
			// important: setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach($this->getOrderItems() as $relObj) {
				$copyObj->addOrderItem($relObj->copy());
			}

			foreach($this->getOrderTemplateItems() as $relObj) {
				$copyObj->addOrderTemplateItem($relObj->copy());
			}
		} // if ($deepCopy)
		
		$copyObj->setNew(true);
		
		$copyObj->setId(NULL); // this is a pkey column, so set to default value

		return $copyObj;
	}
		

	/**
	 * returns a peer instance associated with this om.  Since Peer classes	
	 * are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 * @return ProductPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProductPeer();
		}
		return self::$peer;
	}

}
