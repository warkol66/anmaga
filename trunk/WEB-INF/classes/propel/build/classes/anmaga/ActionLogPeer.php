<?php

  // include base peer class
  require_once 'om/BaseActionLogPeer.php';
  
  // include object class
  include_once 'ActionLog.php';


/**
 * Skeleton subclass for performing query and update operations on the 'log_actionLog' table.
 *
 * logs del sistema
 *
 * This class was autogenerated by Propel on:
 *
 * 03/07/07 14:29:12
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer
 */	
class ActionLogPeer extends BaseActionLogPeer {



		
	///////
	/// selecciona datos por requerimientos
	function selectAllByRequirementsPaginated ($dateFrom,$dateTo,$selectUser,$module,$page=1,$perPage=10) {
		echo "1";
		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(ActionLogPeer::ID);

		echo "datefrom : $dateFrom,,,,, dateto: $dateTo";
		$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
		$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
		////////////
		// Version con afiliado
		@include_once('AffiliatePeer.php');
		if (class_exists('AffiliatePeer')){
			$cond->addJoin(ActionLogPeer::AFFILIATEID, AffiliatePeer::ID,Criteria::LEFT_JOIN);
		}


		if ($selectUser != -1)
		$cond->add(ActionLogPeer::USERID, $selectUser);


		if($module != 1)
		$cond->add(SecurityActionPeer::MODULE, $module);

		$cond->addJoin(ActionLogPeer::ACTION, SecurityActionPeer::ACTION,Criteria::LEFT_JOIN);		

		$pager = new PropelPager($cond,"ActionLogPeer", "doSelect",$page,$perPage);
		return $pager;
	}



	///////
	/// selecciona datos con requerimientos y afiliado
	function selectAllByRequirementsAndAffiliatePaginated  ($dateFrom,$dateTo,$selectUser,$affiliate,$module,$page=1,$perPage=10) {
		echo "2";
		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(ActionLogPeer::ID);
		$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
		$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
		////////////
		// Version con afiliado
		@include_once('mer/AffiliatePeer.php');
		if (class_exists('AffiliatePeer')){
			$cond->addJoin(ActionLogPeer::AFFILIATEID, AffiliatePeer::ID,Criteria::LEFT_JOIN);
		}

		if ($selectUser != -1)
		$cond->add(ActionLogPeer::USERID, $selectUser);

		if($module != 1)
		$cond->add(SecurityActionPeer::MODULE, $module);

		$cond->addJoin(ActionLogPeer::ACTION, SecurityActionPeer::ACTION,Criteria::LEFT_JOIN);		

		$pager = new PropelPager($cond,"ActionLogPeer", "doSelect",$page,$perPage);
		return $pager;
	}


	///////
	// purga datos del historico
	function deleteLogs($dateFrom,$dateTo)
		{ 	try{
			$cond = new Criteria();

			$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
			$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
			$selectedLogs = ActionLogPeer::doSelect($cond);
			
			foreach($selectedLogs as $obj)
				{
					$obj->delete();
				}
			}catch (PropelException $e) {}
		return;
	}












} // ActionLogPeer
