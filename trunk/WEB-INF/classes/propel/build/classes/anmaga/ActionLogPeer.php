<?php

  // include base peer class
  require_once 'om/BaseActionLogPeer.php';
  
  // include object class
  include_once 'ActionLog.php';


/**
 * Skeleton subclass for performing query and update operations on the 'log_actionLog' table.
 *
 * logs del sistema
 *
 * This class was autogenerated by Propel on:
 *
 * 03/07/07 14:29:12
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer
 */	
class ActionLogPeer extends BaseActionLogPeer {



	///////
	/// selecciona datos sin affiliate, por fecha
	function selectAllByDatePaginated ($dateFrom,$dateTo,$module,$page=1,$perPage=10) {

		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(ActionLogPeer::ID);
		$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
		$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
		////////////
		// Version con afiliado
		@include_once('mer/AffiliatePeer.php');
		if (class_exists('AffiliatePeer')){
			$cond->addJoin(ActionLogPeer::AFFILIATEID, AffiliatePeer::ID,Criteria::LEFT_JOIN);
		}

		if($module != 1)
		$cond->add(ActionLogPeer::ACTION, $module."%", Criteria::LIKE );


		$cond->addJoin(ActionLogPeer::ACTION, SecurityActionPeer::ACTION,Criteria::LEFT_JOIN);		
		

		$pager = new PropelPager($cond,"ActionLogPeer", "doSelect",$page,$perPage);
		return $pager;
	}

	///////
	/// selecciona datos por fecha y usuario
	function selectAllByDateAndUserPaginated ($dateFrom,$dateTo,$selectUser,$module,$page=1,$perPage=10) {

		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(ActionLogPeer::ID);
		$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
		$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
		$cond->add(ActionLogPeer::USERID, $selectUser);

		////////////
		// Version con afiliado
		@include_once('mer/AffiliatePeer.php');
		if (class_exists('AffiliatePeer')){
			$cond->addJoin(ActionLogPeer::AFFILIATEID, AffiliatePeer::ID,Criteria::LEFT_JOIN);
		}

		if($module != 1)
		$cond->add(ActionLogPeer::ACTION, $module."%", Criteria::LIKE );

		$cond->addJoin(ActionLogPeer::ACTION, SecurityActionPeer::ACTION,Criteria::LEFT_JOIN);		
		

		$pager = new PropelPager($cond,"ActionLogPeer", "doSelect",$page,$perPage);
		return $pager;
	}



	///////
	/// selecciona datos con affiliate, y fecha como filtros
	function selectAllByDateAndAffiliatePaginated ($dateFrom,$dateTo,$affiliateId,$module,$page=1,$perPage=10) {

		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(ActionLogPeer::ID);
		$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
		$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
		////////////
		// Version con afiliado
		@include_once('mer/AffiliatePeer.php');
		if (class_exists('AffiliatePeer')){
			$cond->addJoin(ActionLogPeer::AFFILIATEID, AffiliatePeer::ID,Criteria::LEFT_JOIN);
		}

		if($module != 1)
		$cond->add(ActionLogPeer::ACTION, $module."%", Criteria::LIKE );

		$cond->addJoin(ActionLogPeer::ACTION, SecurityActionPeer::ACTION,Criteria::LEFT_JOIN);		

		$pager = new PropelPager($cond,"ActionLogPeer", "doSelect",$page,$perPage);
		return $pager;
	}


	///////
	/// selecciona datos con affiliate, fecha y usuario como filtros
	function selectAllByDateUserAndAffiliatePaginated ($dateFrom,$dateTo,$affiliateId,$module,$page=1,$perPage=10) {

		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(ActionLogPeer::ID);
		$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
		$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
		$cond->add(ActionLogPeer::USERID, $selectUser);

		////////////
		// Version con afiliado
		@include_once('mer/AffiliatePeer.php');
		if (class_exists('AffiliatePeer')){
			$cond->addJoin(ActionLogPeer::AFFILIATEID, AffiliatePeer::ID,Criteria::LEFT_JOIN);

		}

		if($module != 1)
		$cond->add(ActionLogPeer::ACTION, $module."%", Criteria::LIKE );


		$cond->addJoin(ActionLogPeer::ACTION, SecurityActionPeer::ACTION,Criteria::LEFT_JOIN);		

		$pager = new PropelPager($cond,"ActionLogPeer", "doSelect",$page,$perPage);
		return $pager;
	}


	///////
	/// selecciona datos con affiliate, y fecha como filtros
	function selectAllByDateaginated ($dateFrom,$dateTo,$affiliateId,$module, $page=1,$perPage=10) {

		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(ActionLogPeer::ID);
		$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
		$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
		$cond->add(ActionLogPeer::ACTION, $module."_", Criteria::LIKE );
		////////////
		// Version con afiliado
		@include_once('mer/AffiliatePeer.php');
		if (class_exists('AffiliatePeer')){
			$cond->addJoin(ActionLogPeer::AFFILIATEID, AffiliatePeer::ID,Criteria::LEFT_JOIN);
		}
		$cond->addJoin(ActionLogPeer::ACTION, SecurityActionPeer::ACTION,Criteria::LEFT_JOIN);	
		
		if($module != 1)
		$cond->add(ActionLogPeer::ACTION, $module."%", Criteria::LIKE );

		$pager = new PropelPager($cond,"ActionLogPeer", "doSelect",$page,$perPage);
		return $pager;
	}


	///////
	// purga datos del historico
	function deleteLogs($dateFrom,$dateTo)
		{ 	try{
			$cond = new Criteria();

			$cond->add(ActionLogPeer::DATETIME, $dateFrom." 00:00:00", Criteria::GREATER_THAN );
			$cond->add(ActionLogPeer::DATETIME, $dateTo." 23:59:59", Criteria::LESS_THAN );
			$selectedLogs = ActionLogPeer::doSelect($cond);
			
			foreach($selectedLogs as $obj)
				{
					$obj->delete();
				}
			}catch (PropelException $e) {}
		return;
	}












} // ActionLogPeer
