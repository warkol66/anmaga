<?php

  // include base peer class
  require_once 'anmaga/om/BaseModulePeer.php';
  
  // include object class
  include_once 'anmaga/Module.php';
  
  // include object class
  include_once 'anmaga/ModuleDependency.php';


/**
 * Skeleton subclass for performing query and update operations on the 'modules_module' table.
 *
 *  Registro de modulos
 *
 * This class was autogenerated by Propel on:
 *
 * 03/28/07 13:59:17
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package anmaga
 */	
	//global $modulesPath;


class ModulePeer extends BaseModulePeer {


/**
*
*	Obtiene todos los módulos almacenados en la base de datos
*	@return object $modules Modulos almacenados en la base de datos
*/
	function getAll() {
		$cond = new Criteria();
		$todosObj = ModulePeer::doSelect($cond);
		return $todosObj;
	}


/**
*
*	Toma un modulo
*	@param string $moduleName nombre del modulo
*	@return object $module nombre del modulo seleccionado
*/
	function get($moduleName) {
		   	$obj = ModulePeer::retrieveByPK($moduleName);
		return $obj;
	}
	
	
	function delete($module)
		{ 	try{
			$obj = new Module();
			$obj = ModulePeer::retrieveByPK($module);
			if(!empty($obj))
				{
					$obj->delete();
				}
		}catch (PropelException $e) {}
		return;
		}


	/**
	* Limpia el acceso activo de un modulo
	*
	* @param string $action con el nombre del modulo a limpiar
	*/

  function clearActive($module) {
		$obj = new Module();
		$obj = ModulePeer::retrieveByPK($module);
		$obj->setActive(0);
		$obj->save();
		return;
  }



/**
*
*	Actualiza estado de un modulo
*	@param string $moduleName nombre del modulo
*	@param string $active nuevo estado del modulo
*	@return true si se actualizó correctamente
*/
	function setActive ($moduleName,$active){
		$obj = new Module();
		$obj = ModulePeer::retrieveByPK($moduleName);
		$obj->setActive($active);
		$obj->save();
		return;
  }

	
/**
*
*	Carga un xml con datos del módulo y lo Guarda en la base de datos
*	@param string $moduleName nombre del modulo
*	@return true si se agrego correctamente
*/
	function addAndInstallModule($moduleName) {
		try{
			$path="WEB-INF/classes/modules/$moduleName/$moduleName.xml";
		
			/////////
			// parte de carga de xml
			require_once('includes/assoc_array2xml.php');
			$converter= new assoc_array2xml;
			$xml = file_get_contents($path);
			$arrayXml = $converter->xml2array($xml);

			//print_r($arrayXml);

			
			//////////
			// seccion de comprobaciones
			//			echo "0";
			if (empty($arrayXml))return false;
			//echo "1";
			if (empty ($arrayXml["moduleInstalation"]["config"]["description"]) ) return false;
			//echo "2";
			if (empty ($arrayXml["moduleInstalation"]["config"]["label"]) ) return false;
						echo "3";
			if (empty($arrayXml["moduleInstalation"]["config"]["alwaysActive"] ) )
				$arrayXml["moduleInstalation"]["config"]["alwaysActive"]=0;
			//echo "3";
			if (!empty($arrayXml["moduleInstalation"]["config"]["moduleDependencies"] ) ){
				foreach ($arrayXml["moduleInstalation"]["config"]["moduleDependencies"] as $moduleDependency){
					$moduleDep = new ModuleDependencyPeer();
					$moduleDep->setDependency($moduleName, $moduleDependency);
				}
			}

			//////////
			// parte de carga a la base de datos
			$moduleObj = new Module();
			$moduleObj->setName($moduleName);
			$moduleObj ->setDescription($arrayXml["moduleInstalation"]["config"]["description"]);
			$moduleObj ->setLabel($arrayXml["moduleInstalation"]["config"]["label"]);
			$moduleObj ->setActive(0);
			$moduleObj ->setAlwaysActive($arrayXml["moduleInstalation"]["config"]["alwaysActive"]);
			$moduleObj ->save();
		}catch (PropelException $e) {}
		return true;
	}




/**
*
*	Actualiza en la base de datos módulos
*	@param string $moduleName nombre del modulo
*	@param string $description descripcion del modulo
*	@param string $label etiqueta del módulo
*	@return true si se agrego correctamente
*/

function updateModule($module,$description,$label) {
		try{
		$moduleObj = new Module();
		$moduleObj = ModulePeer::retrieveByPK($module);
		$moduleObj ->setDescription($description);
		$moduleObj ->setLabel($label);

		$moduleObj ->save();
		}catch (PropelException $e) {}
		return true;
	}



/**
*
*	Checkea las dependencias de un modulo
*	@param string $moduleName nombre del modulo
*	@return object $dependencies dependencias del modulo
*/
//useless
/*function hasDependencies ($moduleName){
		$obj = new Module();
		$obj = ModulePeer::retrieveByPK($moduleName);
}
*/


/**
*
*	Checkea el estado de una dependencia
*	@param string $dependencyName nombre de la dependencia
*	@return true si esta activada, false si está desactivada
*/
function dependencyStatus ($dependencyName){
		$obj = new Module();
		$obj = ModulePeer::retrieveByPK($dependencyName);
		if($obj){
		//	echo "a";
			if (!$obj->getAlwaysActive() ){
				//echo "b";
				if(!$obj->getActive() ) {
					return 0;
				}
			}	
		}
		else return 0;
	//	echo "c";
		return 1;
}







} // ModulePeer
