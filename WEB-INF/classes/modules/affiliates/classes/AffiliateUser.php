<?php

/**
 * Skeleton subclass for representing a row from the 'affiliates_user' table.
 *
 * Usuarios de afiliado
 *
 * This class was autogenerated by Propel on:
 *
 * 07/18/07 19:06:41
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class AffiliateUser extends BaseAffiliateUser {

	function getGroups() {
		return AffiliateUserGroupQuery::create()->filterByAffiliateUser()->find($this);
	}
	
   /**
    * Return an array with all the categories this user can access
    *
    * @return array of Catetegory
    */
  function getCategories(){
  	return CategoryQuery::create()->join('AffiliateGroupCategory')
								  ->join('AffiliateGroupCategory.AffiliateUserGroup')
								  ->join('AffiliateUserGroup.AffiliateUser')
								  ->useQuery('AffiliateUser')
								  	->filterByPrimaryKey($this->getPrimaryKey())
								  ->endUse()
								  ->find();
  }
  
  /**
  * Asigna los grupos del usuario a una categoria.
  *
  * @param int $categoryId Id de la categoria
  * @return void
  */
  function setGroupsToCategory($categoryId) {
		foreach ($this->getGroups() as $group) {
			$groupCategory = new AffiliateGroupCategory();
			$groupCategory->setGroupId($group->getGroupId());
			$groupCategory->setCategoryId($categoryId);
			$groupCategory->save();
		}
		return;
	}



  function getAll() {
		return AffiliateUserQuery::create()->find();
  }

  /**
  * Obtiene el nombre del afiliado
  *
  * @return string Nombre del afiliado
  */
  function getAffiliate() {
		$affiliateId = $this->getAffiliateId();
		$affiliate = AffiliateQuery::create()->findPk($affiliateId);
		if($affiliate)
			return $affiliate->getName();
		else
			return;
  }

  /**
  * Determina si el usuario es owner de un afiliado
  *
  * @return true o false 
  */
	function isAffiliateOwner() {
		$affiliateId = $this->getAffiliateId();
		$affiliate = AffiliateQuery::create()->findPk($affiliateId);
		if ($affiliate->getOwnerId() == $this->getId())
			return true;
		else
			return false;
  }
	
	/**
	 * Redefinimos para que se pase a minusculas el username.
	 */
	public function setUserName($username) {
		$usernameLowercase = strtolower($username);
		parent::setUserName($usernameLowercase);
		return $this;
	}
	
	public function setPassword($password) {
		if(!empty($password)){
			parent::setPassword(md5($password."ASD"));
		}
		return $this;
	}
	
	public function save(PropelPDO $con = null) {
		try {
			if ($this->validate()) { 
				parent::save($con);
				return true;
			} else {
				return false;
			}
		}
		catch (PropelException $exp) {
			if (ConfigModule::get("global","showPropelExceptions"))
				print_r($exp->getMessage());
			return false;
		}
	}

} // AffiliateUser
