<?php 

require_once 'propel/om/BaseObject.php';

 
require_once 'propel/om/Persistent.php';

 

include_once 'propel/util/Criteria.php';
 

// (on-demand) include_once 'anmaga/Order.php';
// (on-demand) include_once 'anmaga/OrderPeer.php';
 

// (on-demand) include_once 'anmaga/Product.php';
// (on-demand) include_once 'anmaga/ProductPeer.php';

include_once 'anmaga/OrderItemPeer.php';

/**
 * Base class that represents a row from the 'orders_orderItem' table.
 *
 * Item del Pedido de Productos 
 *
 * This class was autogenerated by Propel on:
 *
 * [05/14/07 17:23:25]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to OrderItem class. 
 * 
 * @package anmaga 
 */
abstract class BaseOrderItem extends BaseObject implements Persistent {
	
	/** 
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var OrderItemPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var int	  
	 */
	protected $id;	

	/**
	 * The value for the orderid field.
	 * @var int	  
	 */
	protected $orderid;	

	/**
	 * The value for the productid field.
	 * @var int	  
	 */
	protected $productid;	

	/**
	 * The value for the price field.
	 * @var double	  
	 */
	protected $price;	

	/**
	 * The value for the quantity field.
	 * @var int	  
	 */
	protected $quantity;	
  
	/**
	 * Get the Id column value.
	 * Id del item del pedido 
	 * @return int	  
	 */
	public function getId()
	{
		return $this->id;
	}


	/**
	 * Set the value of `id` column.	  
	 * Id del item del pedido 
	 * @param int $v new value
	 * @return void
	 *  
	 */
	public function setId($v)
	{
		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = OrderItemPeer::ID;
		}
				
	}

  
	/**
	 * Get the Orderid column value.
	 * Id del pedido 
	 * @return int	  
	 */
	public function getOrderid()
	{
		return $this->orderid;
	}


	/**
	 * Set the value of `orderid` column.	  
	 * Id del pedido 
	 * @param int $v new value
	 * @return void
	 * @throws PropelException 
	 */
	public function setOrderid($v)
	{
		if ($this->orderid !== $v) {
			$this->orderid = $v;
			$this->modifiedColumns[] = OrderItemPeer::ORDERID;
		}
			
		if ($this->aOrder !== null && $this->aOrder->getId() !== $v) {
			$this->aOrder = null;
		}
			
	}

  
	/**
	 * Get the Productid column value.
	 * Id del usuario 
	 * @return int	  
	 */
	public function getProductid()
	{
		return $this->productid;
	}


	/**
	 * Set the value of `productid` column.	  
	 * Id del usuario 
	 * @param int $v new value
	 * @return void
	 * @throws PropelException 
	 */
	public function setProductid($v)
	{
		if ($this->productid !== $v) {
			$this->productid = $v;
			$this->modifiedColumns[] = OrderItemPeer::PRODUCTID;
		}
			
		if ($this->aProduct !== null && $this->aProduct->getId() !== $v) {
			$this->aProduct = null;
		}
			
	}

  
	/**
	 * Get the Price column value.
	 * Precio del producto 
	 * @return double	  
	 */
	public function getPrice()
	{
		return $this->price;
	}


	/**
	 * Set the value of `price` column.	  
	 * Precio del producto 
	 * @param double $v new value
	 * @return void
	 *  
	 */
	public function setPrice($v)
	{
		if ($this->price !== $v) {
			$this->price = $v;
			$this->modifiedColumns[] = OrderItemPeer::PRICE;
		}
				
	}

  
	/**
	 * Get the Quantity column value.
	 * Cantidad del producto en el pedido 
	 * @return int	  
	 */
	public function getQuantity()
	{
		return $this->quantity;
	}


	/**
	 * Set the value of `quantity` column.	  
	 * Cantidad del producto en el pedido 
	 * @param int $v new value
	 * @return void
	 *  
	 */
	public function setQuantity($v)
	{
		if ($this->quantity !== $v) {
			$this->quantity = $v;
			$this->modifiedColumns[] = OrderItemPeer::QUANTITY;
		}
				
	}


	
	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return void
	 * @throws PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {
			$this->id = $rs->getInt($startcol + 0);					
			$this->orderid = $rs->getInt($startcol + 1);					
			$this->productid = $rs->getInt($startcol + 2);					
			$this->price = $rs->getFloat($startcol + 3);					
			$this->quantity = $rs->getInt($startcol + 4);					
			 
			$this->resetModified();
			$this->setNew(false);
		
		} catch (Exception $e) {
			throw new PropelException("Error populating OrderItem object", $e);
		}		
	
	}
	
	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 * 
	 * @return Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{		
		$criteria = new Criteria(OrderItemPeer::DATABASE_NAME);
		$criteria->add(OrderItemPeer::ID, $this->id);
		return $criteria;			
	}
	
	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{		
		$criteria = new Criteria(OrderItemPeer::DATABASE_NAME);
		if ($this->isColumnModified(OrderItemPeer::ID)) $criteria->add(OrderItemPeer::ID, $this->id);
		if ($this->isColumnModified(OrderItemPeer::ORDERID)) $criteria->add(OrderItemPeer::ORDERID, $this->orderid);
		if ($this->isColumnModified(OrderItemPeer::PRODUCTID)) $criteria->add(OrderItemPeer::PRODUCTID, $this->productid);
		if ($this->isColumnModified(OrderItemPeer::PRICE)) $criteria->add(OrderItemPeer::PRICE, $this->price);
		if ($this->isColumnModified(OrderItemPeer::QUANTITY)) $criteria->add(OrderItemPeer::QUANTITY, $this->quantity);
		return $criteria;			
	}
	
	

	/**
	 * @var Order	  
	 */
	protected $aOrder;

	/**
	 * Declares an association between this object and a Order object
	 *
	 * @param Order $v
	 * @return void
	 * @throws PropelException
	 */
	public function setOrder($v)
	{
			
		if ($v === null) {
			$this->setOrderid(NULL);
		} else {
			$this->setOrderid($v->getId());
		}
   
		$this->aOrder = $v;
	}


	/**
	 * Get the associated Order object
	 *
	 * @param Connection Optional Connection object.
	 * @return Order The associated Order object.
	 * @throws PropelException
	 */
	public function getOrder($con = null)
	{
		// include the Peer class
		include_once 'anmaga/OrderPeer.php';

		if ($this->aOrder === null && ($this->orderid !== null)) {
	
			$this->aOrder = OrderPeer::retrieveByPK($this->orderid, $con);
	
			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = OrderPeer::retrieveByPK($this->orderid, $con);
			   $obj->addOrderItems($this);
			 */
		}
		return $this->aOrder;
	}

	/**
	 * Provides convenient way to set a relationship based on a
	 * key.  e.g.
	 * <code>$bar->setFooKey($foo->getPrimaryKey())</code>
	 *
 
	 * @return void
	 * @throws PropelException
	 */
	public function setOrderKey($key)
	{

		$this->setOrderid( (int) $key);			
		
	}

	/**
	 * @var Product	  
	 */
	protected $aProduct;

	/**
	 * Declares an association between this object and a Product object
	 *
	 * @param Product $v
	 * @return void
	 * @throws PropelException
	 */
	public function setProduct($v)
	{
			
		if ($v === null) {
			$this->setProductid(NULL);
		} else {
			$this->setProductid($v->getId());
		}
   
		$this->aProduct = $v;
	}


	/**
	 * Get the associated Product object
	 *
	 * @param Connection Optional Connection object.
	 * @return Product The associated Product object.
	 * @throws PropelException
	 */
	public function getProduct($con = null)
	{
		// include the Peer class
		include_once 'anmaga/ProductPeer.php';

		if ($this->aProduct === null && ($this->productid !== null)) {
	
			$this->aProduct = ProductPeer::retrieveByPK($this->productid, $con);
	
			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = ProductPeer::retrieveByPK($this->productid, $con);
			   $obj->addOrderItems($this);
			 */
		}
		return $this->aProduct;
	}

	/**
	 * Provides convenient way to set a relationship based on a
	 * key.  e.g.
	 * <code>$bar->setFooKey($foo->getPrimaryKey())</code>
	 *
 
	 * @return void
	 * @throws PropelException
	 */
	public function setProductKey($key)
	{

		$this->setProductid( (int) $key);			
		
	}



 
	/**
	 * Removes this object from datastore and sets delete attribute.
	 * 
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 * @see BaseObject::setDeleted()
	 * @see BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{	
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}
		
		if ($con === null)
			$con = Propel::getConnection(OrderItemPeer::DATABASE_NAME);

		try {
			$con->begin();
			OrderItemPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}
	

	/**
	 * flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	private $alreadyInSave = false;

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}
		
		if ($con === null)
			$con = Propel::getConnection(OrderItemPeer::DATABASE_NAME);

		try {
			$con->begin();
			$this->doSave($con);			
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}
  
	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.
	 *
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 */
		protected function doSave($con)	{ 
		
	 
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.
 
			if ($this->aOrder !== null) {
				if ($this->aOrder->isModified()) $this->aOrder->save($con);
				$this->setOrder($this->aOrder);
			}
 
			if ($this->aProduct !== null) {
				if ($this->aProduct->isModified()) $this->aProduct->save($con);
				$this->setProduct($this->aProduct);
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = OrderItemPeer::doInsert($this, $con);
					$this->setId( $pk );  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					OrderItemPeer::doUpdate($this, $con);
				}			
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;
		}
	}

	/**
	 * Validates the objects modified field values.
	 * This includes all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param mixed $columns Column name or an array of column names.
	 *
	 * @return mixed <code>true</code> if all columns pass validation
	 *			  or an array of <code>ValidationFailed</code> objects for columns that fail.
	 */
	public function validate($columns = null)
	{
	  if ($columns)
	  {
		return OrderItemPeer::doValidate($this, $columns);
	  }

		return $this->doValidate();
	}

	/**
	 * flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	protected $alreadyInValidation = false;
  
	/**
	 * This function performs the validation work for complex object models.
	 * 
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate()
	{
		if (! $this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;
	  
			$failureMap = array();	  
	  
			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.
			if ($this->aOrder !== null) {
				if (($retval = $this->aOrder->validate()) !== true) {
					$failureMap = array_merge($failureMap, $retval);
				}
			}
			if ($this->aProduct !== null) {
				if (($retval = $this->aProduct->validate()) !== true) {
					$failureMap = array_merge($failureMap, $retval);
				}
			}

			if (($retval = OrderItemPeer::doValidate($this)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}
	  
	  
			$this->alreadyInValidation = false;
		}
	
		return (!empty($failureMap) ? $failureMap : true);
	}
  

	/**
	 * Set the PrimaryKey.
	 *
	 * @param mixed id Primary key.
	 * @return void
	 * @throws PropelException	 */
	public function setPrimaryKey($key) 
	{		
		$this->setId($key);
	}
	

	/**
	 * Returns an id that differentiates this object from others
	 * of its class.
	 * @return int 
	 */
	public function getPrimaryKey()
	{

		return $this->getId();

	}

	
	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *  
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 *  
	 * @return OrderItem Clone of current object.
	 * @throws PropelException
	 */
	public function copy($deepCopy = false) 
	{
		$copyObj = new OrderItem();
		$copyObj->setOrderid($this->orderid);
		$copyObj->setProductid($this->productid);
		$copyObj->setPrice($this->price);
		$copyObj->setQuantity($this->quantity);
		
		$copyObj->setNew(true);
		
		$copyObj->setId(NULL); // this is a pkey column, so set to default value

		return $copyObj;
	}
		

	/**
	 * returns a peer instance associated with this om.  Since Peer classes	
	 * are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 * @return OrderItemPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new OrderItemPeer();
		}
		return self::$peer;
	}

}
