<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'anmaga/SecurityActionPeer.php';

/**
 * Base class that represents a row from the 'security_action' table.
 *
 * Actions del sistema
 *
 * This class was autogenerated by Propel on:
 *
 * 03/28/07 13:59:15
 *
 * @package anmaga.om
 */
abstract class BaseSecurityAction extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var SecurityActionPeer
	 */
	protected static $peer;


	/**
	 * The value for the action field.
	 * @var string
	 */
	protected $action;


	/**
	 * The value for the module field.
	 * @var string
	 */
	protected $module;


	/**
	 * The value for the section field.
	 * @var string
	 */
	protected $section;


	/**
	 * The value for the access field.
	 * @var int
	 */
	protected $access;


	/**
	 * The value for the accessusersbyaffiliate field.
	 * @var int
	 */
	protected $accessusersbyaffiliate;


	/**
	 * The value for the active field.
	 * @var int
	 */
	protected $active;


	/**
	 * The value for the pair field.
	 * @var string
	 */
	protected $pair;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [action] column value.
	 * Action pagina
	 * @return string
	 */
	public function getAction()
	{

		return $this->action;
	}

	/**
	 * Get the [module] column value.
	 * Modulo
	 * @return string
	 */
	public function getModule()
	{

		return $this->module;
	}

	/**
	 * Get the [section] column value.
	 * Seccion
	 * @return string
	 */
	public function getSection()
	{

		return $this->section;
	}

	/**
	 * Get the [access] column value.
	 * El acceso a ese action
	 * @return int
	 */
	public function getAccess()
	{

		return $this->access;
	}

	/**
	 * Get the [accessusersbyaffiliate] column value.
	 * El acceso a ese action para los usuarios por afiliados
	 * @return int
	 */
	public function getAccessusersbyaffiliate()
	{

		return $this->accessusersbyaffiliate;
	}

	/**
	 * Get the [active] column value.
	 * Si el action esta activo o no
	 * @return int
	 */
	public function getActive()
	{

		return $this->active;
	}

	/**
	 * Get the [pair] column value.
	 * Par del Action
	 * @return string
	 */
	public function getPair()
	{

		return $this->pair;
	}

	/**
	 * Set the value of [action] column.
	 * Action pagina
	 * @param string $v new value
	 * @return void
	 */
	public function setAction($v)
	{

		if ($this->action !== $v) {
			$this->action = $v;
			$this->modifiedColumns[] = SecurityActionPeer::ACTION;
		}

	} // setAction()

	/**
	 * Set the value of [module] column.
	 * Modulo
	 * @param string $v new value
	 * @return void
	 */
	public function setModule($v)
	{

		if ($this->module !== $v) {
			$this->module = $v;
			$this->modifiedColumns[] = SecurityActionPeer::MODULE;
		}

	} // setModule()

	/**
	 * Set the value of [section] column.
	 * Seccion
	 * @param string $v new value
	 * @return void
	 */
	public function setSection($v)
	{

		if ($this->section !== $v) {
			$this->section = $v;
			$this->modifiedColumns[] = SecurityActionPeer::SECTION;
		}

	} // setSection()

	/**
	 * Set the value of [access] column.
	 * El acceso a ese action
	 * @param int $v new value
	 * @return void
	 */
	public function setAccess($v)
	{

		if ($this->access !== $v) {
			$this->access = $v;
			$this->modifiedColumns[] = SecurityActionPeer::ACCESS;
		}

	} // setAccess()

	/**
	 * Set the value of [accessusersbyaffiliate] column.
	 * El acceso a ese action para los usuarios por afiliados
	 * @param int $v new value
	 * @return void
	 */
	public function setAccessusersbyaffiliate($v)
	{

		if ($this->accessusersbyaffiliate !== $v) {
			$this->accessusersbyaffiliate = $v;
			$this->modifiedColumns[] = SecurityActionPeer::ACCESSUSERSBYAFFILIATE;
		}

	} // setAccessusersbyaffiliate()

	/**
	 * Set the value of [active] column.
	 * Si el action esta activo o no
	 * @param int $v new value
	 * @return void
	 */
	public function setActive($v)
	{

		if ($this->active !== $v) {
			$this->active = $v;
			$this->modifiedColumns[] = SecurityActionPeer::ACTIVE;
		}

	} // setActive()

	/**
	 * Set the value of [pair] column.
	 * Par del Action
	 * @param string $v new value
	 * @return void
	 */
	public function setPair($v)
	{

		if ($this->pair !== $v) {
			$this->pair = $v;
			$this->modifiedColumns[] = SecurityActionPeer::PAIR;
		}

	} // setPair()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return int next starting column
	 * @throws PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->action = $rs->getString($startcol + 0);

			$this->module = $rs->getString($startcol + 1);

			$this->section = $rs->getString($startcol + 2);

			$this->access = $rs->getInt($startcol + 3);

			$this->accessusersbyaffiliate = $rs->getInt($startcol + 4);

			$this->active = $rs->getInt($startcol + 5);

			$this->pair = $rs->getString($startcol + 6);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = SecurityActionPeer::NUM_COLUMNS - SecurityActionPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SecurityAction object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param Connection $con
	 * @return void
	 * @throws PropelException
	 * @see BaseObject::setDeleted()
	 * @see BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SecurityActionPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			SecurityActionPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param Connection $con
	 * @return int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws PropelException
	 * @see doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SecurityActionPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param Connection $con
	 * @return int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws PropelException
	 * @see save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SecurityActionPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += SecurityActionPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return array ValidationFailed[]
	 * @see validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param mixed $columns Column name or an array of column names.
	 * @return boolean Whether all columns pass validation.
	 * @see doValidate()
	 * @see getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param array $columns Array of column names to validate.
	 * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = SecurityActionPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SecurityActionPeer::DATABASE_NAME);

		if ($this->isColumnModified(SecurityActionPeer::ACTION)) $criteria->add(SecurityActionPeer::ACTION, $this->action);
		if ($this->isColumnModified(SecurityActionPeer::MODULE)) $criteria->add(SecurityActionPeer::MODULE, $this->module);
		if ($this->isColumnModified(SecurityActionPeer::SECTION)) $criteria->add(SecurityActionPeer::SECTION, $this->section);
		if ($this->isColumnModified(SecurityActionPeer::ACCESS)) $criteria->add(SecurityActionPeer::ACCESS, $this->access);
		if ($this->isColumnModified(SecurityActionPeer::ACCESSUSERSBYAFFILIATE)) $criteria->add(SecurityActionPeer::ACCESSUSERSBYAFFILIATE, $this->accessusersbyaffiliate);
		if ($this->isColumnModified(SecurityActionPeer::ACTIVE)) $criteria->add(SecurityActionPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(SecurityActionPeer::PAIR)) $criteria->add(SecurityActionPeer::PAIR, $this->pair);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SecurityActionPeer::DATABASE_NAME);

		$criteria->add(SecurityActionPeer::ACTION, $this->action);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return string
	 */
	public function getPrimaryKey()
	{
		return $this->getAction();
	}

	/**
	 * Generic method to set the primary key (action column).
	 *
	 * @param string $key Primary key.
	 * @return void
	 */
	public function setPrimaryKey($key)
	{
		$this->setAction($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param object $copyObj An object of SecurityAction (or compatible) type.
	 * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setModule($this->module);

		$copyObj->setSection($this->section);

		$copyObj->setAccess($this->access);

		$copyObj->setAccessusersbyaffiliate($this->accessusersbyaffiliate);

		$copyObj->setActive($this->active);

		$copyObj->setPair($this->pair);


		$copyObj->setNew(true);

		$copyObj->setAction(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return SecurityAction Clone of current object.
	 * @throws PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return SecurityActionPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SecurityActionPeer();
		}
		return self::$peer;
	}

} // BaseSecurityAction
