<?php
// The parent class
require_once 'om/BaseNodePeer.php';

// The object class
include_once 'Node.php';

/** 
 * The skeleton for this class was autogenerated by Propel on:
 *
 * [02/28/07 13:26:08]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 *
 * @package sipro 
 */
class NodePeer extends BaseNodePeer {

  /**
  * Crea un nodo nuevo.
  *
  * @param string $name name del node
  * @param string $kind kind del node
  * @param int $objectId objectId del node
  * @param int $parentId parentId del node
  * @param int $position position del node
  * @return int Id del nodo creado
	*/
	function create($name,$kind,$objectId,$parentId,$position) {
    $nodeObj = new Node();
    $nodeObj->setname($name);
		$nodeObj->setkind($kind);
		$nodeObj->setobjectId($objectId);
		if ($parentId)
			$nodeObj->setParentId($parentId);
		$nodeObj->setposition($position);    
		$nodeObj->save();
		return $nodeObj->getId();
	}

  /**
  * Actualiza la informacion de un nodo.
  *
  * @param int $id id del node
  * @param string $name name del node
  * @param string $kind kind del node
  * @param int $objectId objectId del node
  * @param int $parentId parentId del node
  * @param int $position position del node
  * @return boolean true
	*/
  function update($id,$name,$kind,$objectId,$parentId,$position) {
  	$nodeObj = NodePeer::retrieveByPK($id);
    $nodeObj->setname($name);
		$nodeObj->setkind($kind);
		$nodeObj->setobjectId($objectId);
		$nodeObj->setparentId($parentId);
		$nodeObj->setposition($position);    
		$nodeObj->save();
		return true;
  }

	/**
	* Elimina un nodo y su subarbol a partir del id del nodo, como asi tambien toda la informacion asociada a los nodos.
	*
  * @param int $id id del nodo
	*	@return boolean true
	*/
  function deleteWithSubTree($id) {
  	$nodeObj = NodePeer::retrieveByPK($id);
    $nodeObj->deleteWithSubTree();
		return true;
  }

  /**
  * Obtiene un node.
  *
  * @param int $id id del nodo
  * @return Node Nodo
  */
  function get($id) {
		$nodeObj = NodePeer::retrieveByPK($id);
    return $nodeObj;
  }
  
  /**
  * Obtiene un node de un objeto y tipo dado.
  *
  * @param int $id id del objectId
  * @param string $kind Tipo de nodo
  * @return Node Nodo
  */
  function getByObjectIdAndKind($id,$kind) {
		$cond = new Criteria();
		$cond->add(NodePeer::OBJECTID, $id);
		$cond->add(NodePeer::KIND, $kind);
		$alls = NodePeer::doSelect($cond);
    return $alls[0];
  }
  
  /**
  * Obtiene todos los nodes de un tipo dado.
  *
  * @param string $kind Tipo de nodo
  * @return Node Nodo
  */
  function getAllByKind($kind) {
		$cond = new Criteria();
		$cond->add(NodePeer::KIND, $kind);
		$alls = NodePeer::doSelect($cond);
    return $alls;
  }
  
  /**
  * Obtiene todos los nodes de un tipo dado y con un parentId dado.
  *
  * @param string $kind Tipo de nodo
  * @param int $parentId Id del nodo padre
  * @return Node Nodo
  */
  function getAllByKindAndParentId($kind,$parentId) {
		$cond = new Criteria();
		$cond->add(NodePeer::KIND, $kind);
		$cond->add(NodePeer::PARENTID, $parentId);
		$alls = NodePeer::doSelect($cond);
    return $alls;
  }
  
	/**
	* Elimina todos los nodos de un tipo, junto a sus subarboles, como asi tambien toda la informacion asociada a los nodos.
	*
  * @param string $kind Tipo de nodo
	*	@return boolean true
	*/
  function deleteAllByKind($kind) {
		$nodes = NodePeer::getAllByKind($kind);
		foreach ($nodes as $node)
	    $node->deleteWithSubTree();
		return true;
  }

	/**
	* Elimina todos los nodos de un tipo, junto a sus subarboles, como asi tambien toda la informacion asociada a los nodos.
	*
  * @param string $kind Tipo de nodo
  * @param int $parentId Id del nodo padre
	*	@return boolean true
	*/
  function deleteAllByKindAndParentId($kind,$parentId) {
		$nodes = NodePeer::getAllByKindAndParentId($kind,$parentId);
		foreach ($nodes as $node)
	    $node->deleteWithSubTree();
		return true;
  }

  /**
  * Cambia el nombre del nodo para un objeto y tipo dado.
  *
  * @param int $id id del objectId
  * @param string $kind Tipo de nodo
  * @param string $name Nombre del nodo
  * @return Node Nodo
  */
  function changeNameByObjectIdAndKind($id,$kind,$name) {
  	$node = NodePeer::getByObjectIdAndKind($id,$kind);
		if ($node) {
			$node->setName($name);
			$node->save();
		}
		return $node;
  }

  /**
  * Obtiene todos los nodos.
	*
	*	@return array Array de Node con todos los nodos
  */
	function getAll() {
		$cond = new Criteria();
		$alls = NodePeer::doSelect($cond);
		return $alls;
  }

}
