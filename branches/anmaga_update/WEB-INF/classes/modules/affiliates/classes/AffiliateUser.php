<?php

/**
 * Skeleton subclass for representing a row from the 'affiliates_user' table.
 *
 * Usuarios de afiliado
 *
 * This class was autogenerated by Propel on:
 *
 * 07/18/07 19:06:41
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class AffiliateUser extends BaseAffiliateUser {

	function getGroups() {
		$cond = new Criteria();
		$cond->add(AffiliateUserGroupPeer::USERID, $this->getId());
		$todosObj = AffiliateUserGroupPeer::doSelectJoinGroup($cond);
		return $todosObj;
	}
	
   /**
    * Return an array with all the categories this user can access
    *
    * @return array of Catetegory
    */
  function getCategories(){
  	$sql = "SELECT ".AffiliateCategoryPeer::TABLE_NAME.".* FROM ".AffiliateUserGroupPeer::TABLE_NAME ." ,".
						AffiliateGroupCategoryPeer::TABLE_NAME .", ".AffiliateCategoryPeer::TABLE_NAME .
						" where ".AffiliateUserGroupPeer::USERID ." = '".$this->getId()."' and ".
						AffiliateUserGroupPeer::GROUPID ." = ".AffiliateGroupCategoryPeer::GROUPID ." and ".
						AffiliateGroupCategoryPeer::CATEGORYID ." = ".AffiliateCategoryPeer::ID ." and ".
						AffiliateCategoryPeer::ACTIVE ." = 1";
  	
  	$con = Propel::getConnection(AffiliateUserPeer::DATABASE_NAME);
    $stmt = $con->createStatement();
    $rs = $stmt->executeQuery($sql, ResultSet::FETCHMODE_NUM);    
    return BaseCategoryPeer::populateObjects($rs);
  }
  
  /**
  * Asigna los grupos del usuario a una categoria.
  *
  * @param int $categoryId Id de la categoria
  * @return void
  */
  function setGroupsToCategory($categoryId) {
		foreach ($this->getGroups() as $group) {
			$groupCategory = new AffiliateGroupCategory();
			$groupCategory->setGroupId($group->getGroupId());
			$groupCategory->setCategoryId($categoryId);
			$groupCategory->save();
		}
		return;
	}



	function getAll() {
		$cond = new Criteria();
		$todosObj = AffiliatePeer::doSelect($cond);
		return $todosObj;
  }

  /**
  * Obtiene el nombre del afiliado
  *
  * @return string Nombre del afiliado
  */
	function getAffiliate() {
		$affiliateId = $this->getAffiliateId();
		$affiliate = AffiliateQuery::create()->findPk($affiliateId);
		if($affiliate)
			return $affiliate->getName();
		else
			return;
  }

  /**
  * Determina si el usuario es owner de un afiliado
  *
  * @return true o false 
  */
	function isAffiliateOwner() {
		$affiliateId = $this->getAffiliateId();
		$affiliate = AffiliateQuery::create()->findPk($affiliateId);
		if ($affiliate->getOwnerId() == $this->getId())
			return true;
		else
			return false;
  }

} // AffiliateUser
