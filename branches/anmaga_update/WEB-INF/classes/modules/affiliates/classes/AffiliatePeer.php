<?php

/**
 * Skeleton subclass for performing query and update operations on the 'renal_affiliate' table.
 *
 * Usuarios afiliados
 *
 * This class was autogenerated by Propel on:
 *
 * 12/18/06 12:56:58
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer
 */	
class AffiliatePeer extends BaseAffiliatePeer {

  /**
  * Obtiene la cantidad de filas por pagina por defecto en los listado paginados.
  *
  * @return int Cantidad de filas por pagina
  */
  function getRowsPerPage() {
    global $system;
    return $system["config"]["system"]["rowsPerPage"];
  }

	function getAll() {
		$cond = new Criteria();
		$todosObj = AffiliatePeer::doSelect($cond);
		return $todosObj;
  }

	function getAllPaginated($page=1,$perPage=-1) {
    if ($perPage == -1)
      $perPage = 	AffiliatePeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(AffiliatePeer::ID);

		$pager = new PropelPager($cond,"AffiliatePeer", "doSelect",$page,$perPage);
		return $pager;
	 }

	function getByNamePaginated($name,$page=1,$perPage=-1) {
    if ($perPage == -1)
      $perPage = 	AffiliatePeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
		$cond = new Criteria();
		$cond->add(AffiliatePeer::NAME,"%".$name."%",Criteria::LIKE);
		$cond->addAscendingOrderByColumn(AffiliatePeer::ID);

		$pager = new PropelPager($cond,"AffiliatePeer", "doSelect",$page,$perPage);
		return $pager;
	 }

  function get($id) {
		$affiliate = AffiliatePeer::retrieveByPK($id);
		return $affiliate;
  }

  function getByName($name) {
		$criteria = new Criteria();
		$criteria->add(AffiliatePeer::NAME, $name);
		$criteria->setIgnoreCase(true);
		$result = AffiliatePeer::doSelect($criteria);
		$affiliate = $result[0];
		return $affiliate;
  }

  function update($id,$name) {
		$affiliate = AffiliatePeer::retrieveByPK($id);
		$affiliate->setName($name);
		$affiliate->save();
		return true;
  }

  function delete($id) {
		$affiliate = AffiliatePeer::retrieveByPk($id);
		$affiliate->delete();
		return true;
  }


  function add($name) {
		$affiliate = new Affiliate();		
		$affiliate->setName($name);
		$affiliate->save();
		return $affiliate->getId();
  }

  function getByInternalNumber($internalNumber) {
		$criteria = new Criteria();
		$criteria->setIgnoreCase(true);
		$criteria->addJoin(AffiliateInfoPeer::AFFILIATEID, AffiliatePeer::ID);
		$criteria->add(AffiliateInfoPeer::AFFILIATEINTERNALNUMBER, $internalNumber);
		$affiliateInfo = AffiliateInfoPeer::doSelectOne($criteria);
		return $affiliateInfo;
  }

} // AffiliatePeer
