<?php

  // include base peer class
  require_once 'import/classes/om/BaseSupplierQuotationItemPeer.php';

  // include object class
  include_once 'import/classes/SupplierQuotationItem.php';


/**
 * Skeleton subclass for performing query and update operations on the 'import_supplierQuotationItem' table.
 *
 * Elemento de Cotizacion de Proveedor
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb  2 17:02:11 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class SupplierQuotationItemPeer extends BaseSupplierQuotationItemPeer {
	
  /**
  * Actualiza la informacion de un supplier quotation item dado.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return boolean true si se actualizo la informacion correctamente, false sino
  */  
  function update($params) {
    try {
      $supplierquotationItemObj = SupplierQuotationItemPeer::retrieveByPK($params["id"]);    
      if (empty($supplierquotationItemObj))
        throw new Exception();
      foreach ($params as $key => $value) {
        $setMethod = "set".$key;
        if ( method_exists($supplierquotationItemObj,$setMethod) ) {          
          if (!empty($value))
            $supplierquotationItemObj->$setMethod($value);
          else
            $supplierquotationItemObj->$setMethod(null);
        }
      }
	  $supplierquotationItemObj->setStatus(SupplierQuotationItem::STATUS_QUOTED);

	  require_once('SupplierQuotationItemCommentPeer.php');

	  //creamos el comentario relacionado a la actualizacion
	  $commentParams = array();
	  $commentParams['supplierQuotationItemComment']['price'] = $supplierquotationItemObj->getPrice();
	  $commentParams['supplierQuotationItemComment']['delivery'] = $supplierquotationItemObj->getDelivery();
	  $commentParams['supplierQuotationItemComment']['comments'] = $params['comments'];
	  if (!empty($params['supplierId'])) {
	  	$commentParams['supplierQuotationItemComment']['supplierId'] = $params['supplierId'];
	  }
	
	  if (!empty($params['userId'])) {
	  	$commentParams['supplierQuotationItemComment']['userId'] = $params['userId'];
	  }
		
	  $comment = SupplierQuotationItemCommentPeer::createComment($commentParams['supplierQuotationItemComment']);
	  $supplierquotationItemObj->addSupplierQuotationItemComment($comment);
	  
      $supplierquotationItemObj->save();

	  $supplierQuotation = $supplierquotationItemObj->getSupplierQuotation();
	  if ($supplierQuotation->getStatus() == SupplierQuotation::STATUS_QUOTATION_REQUESTED) {
	  	//al fijarle informacion la cotizacion para a parcialmente cotizada	  	
	    $supplierQuotation->setStatus(SupplierQuotation::STATUS_PARTIALLY_QUOTED);
	    $supplierQuotation->save();
	    $supplierQuotation->saveCurrentStatusOnHistory();
	
	  }

      return $supplierquotationItemObj;
    } catch (Exception $exp) {
      return false;
    }         
  }

  /**
  * Obtiene la informacion de un supplier quotation item.
  *
  * @param int $id id del supplierquotationitem
  * @return array Informacion del supplierquotationitem
  */
  function get($id) {
		$supplierquotationItemObj = SupplierQuotationItemPeer::retrieveByPK($id);
    return $supplierquotationItemObj;
  }


} // SupplierQuotationItemPeer
