<?php

  // include base peer class
  require_once 'import/classes/om/BaseClientQuotationPeer.php';

  // include object class
  include_once 'import/classes/ClientQuotation.php';


/**
 * Skeleton subclass for performing query and update operations on the 'import_clientQuotation' table.
 *
 * Cotizacion a Cliente
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb  2 17:02:11 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class ClientQuotationPeer extends BaseClientQuotationPeer {

  private $affiliateId = '';
  private $productId = '';
  private $adminStatus = '';
  private $affiliateStatus = '';

  //nombre de los estados para los clientes
  private $statusNamesAffiliate = array(
							'New' => array(ClientQuotation::STATUS_NEW),
							'In Progress' => array(ClientQuotation::STATUS_SUPPLIER_QUOTATION_REQUESTED, ClientQuotation::STATUS_WAITING_FOR_PRICING),
							'Partially Quoted' => array(ClientQuotation::STATUS_PARTIALLY_QUOTED),
							'Quoted' => array(ClientQuotation::STATUS_QUOTED)
						);

						//nombre de los estados para los administradores
	private $statusNamesAdmin = array(
								'New' => array(ClientQuotation::STATUS_NEW),
								'Quotation Requested' => array(ClientQuotation::STATUS_SUPPLIER_QUOTATION_REQUESTED),
								'Waiting For Pricing' => array(ClientQuotation::STATUS_WAITING_FOR_PRICING, ClientQuotation::STATUS_PARTIALLY_QUOTED),
								'Quoted' => array(ClientQuotation::STATUS_QUOTED)
							);
  
  /**
   * Devuelve los nombres de los estados del cliente
   */					
  public function getStatusNamesAffiliate() {
		return array_keys($this->statusNamesAffiliate);
  }

  /**
   * Devuelve los nombres de los estados del cleinte
   */					
  public function getStatusNamesAdmin() {
		return array_keys($this->statusNamesAdmin);
  }

  /**
   * Fija un filtro por supplier
   * @param Integer $supplierId id de supplier
   */
  public function setAffiliateId($affiliateId) {
	$this->affiliateId = $affiliateId;
  }	

  /**
   * Fija un filtro por producto
   * @param Integer $productId id de producto
   */
  public function setProductId($productId) {
	$this->productId = $productId;
  }

  /**
   * Fija un filtro por estado de administrador
   * @param Integer $productId id de producto
   */
  public function setAdminStatus($status) {
	$this->adminStatus = $status;
  }	

  /**
   * Fija un filtro por estado de cliente
   * @param Integer $productId id de producto
   */
  public function setAffiliateStatus($status) {
	$this->affiliateStatus = $status;
  }	


  /**
  * Obtiene la cantidad de filas por pagina por defecto en los listado paginados.
  *
  * @return int Cantidad de filas por pagina
  */
  function getRowsPerPage() {
    global $system;
    return $system["config"]["system"]["rowsPerPage"];
  }
  
  /**
  * Crea un client quotation nuevo.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return boolean true si se creo correctamente, false sino
  */  
  function create($params) {
    try {
      $clientquotationObj = new ClientQuotation();
      foreach ($params as $key => $value) {
        $setMethod = "set".$key;
        if ( method_exists($clientquotationObj,$setMethod) ) {          
          if (!empty($value))
            $clientquotationObj->$setMethod($value);
          else
            $clientquotationObj->$setMethod(null);
        }
      }

	  $clientquotationObj->setCreatedAt(time());
	  $clientquotationObj->setStatus(ClientQuotation::STATUS_NEW);
      $clientquotationObj->save();
  
	  $clientquotationObj->saveCurrentStatusOnHistory();

      return $clientquotationObj;
    } catch (Exception $exp) {
      return false;
    }         
  }  
  
  /**
  * Actualiza la informacion de un client quotation.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return boolean true si se actualizo la informacion correctamente, false sino
  */  
  function update($params) {
    try {
      $clientquotationObj = ClientQuotationPeer::retrieveByPK($params["id"]);    
      if (empty($clientquotationObj))
        throw new Exception();
      foreach ($params as $key => $value) {
        $setMethod = "set".$key;
        if ( method_exists($clientquotationObj,$setMethod) ) {          
          if (!empty($value))
            $clientquotationObj->$setMethod($value);
          else
            $clientquotationObj->$setMethod(null);
        }
      }
      $clientquotationObj->save();
      return $clientquotationObj;
    } catch (Exception $exp) {
      return false;
    }         
  }    

	/**
	* Elimina un client quotation a partir de los valores de la clave.
	*
  * @param int $id id del clientquotation
	*	@return boolean true si se elimino correctamente el clientquotation, false sino
	*/
  function delete($id) {
  	$clientquotationObj = ClientQuotationPeer::retrieveByPK($id);
    $clientquotationObj->delete();
		return true;
  }

  /**
  * Obtiene la informacion de un client quotation.
  *
  * @param int $id id del clientquotation
  * @return array Informacion del clientquotation
  */
  function get($id) {
		$clientquotationObj = ClientQuotationPeer::retrieveByPK($id);
    return $clientquotationObj;
  }

  /**
  * Obtiene todos los client quotations.
	*
	*	@return array Informacion sobre todos los clientquotations
  */
	function getAll() {
		$cond = new Criteria();
		$alls = ClientQuotationPeer::doSelect($cond);
		return $alls;
  }
  
  /**
  * Obtiene todos los client quotations paginados.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los clientquotations
  */
  function getAllPaginated($page=1,$perPage=-1) {  
    if ($perPage == -1)
      $perPage = 	ClientQuotationPeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    require_once("propel/util/PropelPager.php");
    $cond = new Criteria();     
    $pager = new PropelPager($cond,"ClientQuotationPeer", "doSelect",$page,$perPage);
    return $pager;
   }    


  /**
  * Obtiene todos los client quotations paginados.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los clientquotations
  */
  function getAllPaginatedByAffiliate($affiliate,$page=1,$perPage=-1) {
	
    if ($perPage == -1)
      $perPage = 	ClientQuotationPeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    require_once("propel/util/PropelPager.php");
    $cond = new Criteria();
	$cond->add(ClientQuotationPeer::AFFILIATEID,$affiliate->getId());
    $pager = new PropelPager($cond,"ClientQuotationPeer", "doSelect",$page,$perPage);
    return $pager;
   }

  /**
  * Obtiene todos los client quotations paginados.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los clientquotations
  */
  function getAllPaginatedByAffiliateFiltered($affiliate,$page=1,$perPage=-1) {

    if ($perPage == -1)
      $perPage = 	ClientQuotationPeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    require_once("propel/util/PropelPager.php");
    $cond = $this->getFilterCriteria();
	$cond->add(ClientQuotationPeer::AFFILIATEID,$affiliate->getId());
    $pager = new PropelPager($cond,"ClientQuotationPeer", "doSelect",$page,$perPage);
    return $pager;
   }

	/**
	 * Realiza el procesamiento de un array de status
	 *
	 */
	private function processStatus($criteria,$status) {
		foreach ($status as $stat) {
			if (empty($criterion)) {
				$criterion = $criteria->getNewCriterion(ClientQuotationPeer::STATUS, $stat, Criteria::EQUAL);
			}
			else {
				$criterion->addOr($criteria->getNewCriterion(ClientQuotationPeer::STATUS, $stat, Criteria::EQUAL));
			}
		}
		return $criterion;
	}

  /**
   * Genera una criteria segun la informacion introducida para filtros
   * @return Criteria instancia de criteria
   */
  private function getFilterCriteria() {
	$criteria = New Criteria();
	$criteria->addJoin(ClientQuotationPeer::ID,ClientQuotationItemPeer::CLIENTQUOTATIONID,Criteria::INNER_JOIN);

	if (!empty($this->affiliateId)) {
		$criteria->add(ClientQuotationPeer::AFFILIATEID,$this->affiliateId);
	}
	
	if (!empty($this->productId)) {
		$criteria->add(ClientQuotationItemPeer::PRODUCTID,$this->productId);
	}

	if (!empty($this->affiliateStatus)) {

		$status = $this->statusNamesAffiliate[$this->affiliateStatus];
		$criteria->add($this->processStatus($criteria,$status));

	}

	if (!empty($this->adminStatus)) {
		$status = $this->statusNamesAdmin[$this->adminStatus];
		$criteria->add($this->processStatus($criteria,$status));
	}
	
	$criteria->setDistinct();
	
	return $criteria;
  }    

  /**
  * Obtiene todos los supplier quotations paginados aplicando los filtros.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los supplierquotations
  */
  public function getAllPaginatedFiltered($page=1,$perPage=-1) {  
    if ($perPage == -1)
      $perPage = 	SupplierQuotationPeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    require_once("propel/util/PropelPager.php");
    $cond = $this->getFilterCriteria();   
    $pager = new PropelPager($cond,"ClientQuotationPeer","doSelect",$page,$perPage);
    return $pager;
   }    	


} // ClientQuotationPeer
