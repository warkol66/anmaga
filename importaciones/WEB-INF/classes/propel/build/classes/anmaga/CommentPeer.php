<?php

  // include base peer class
  require_once 'anmaga/om/BaseCommentPeer.php';

  // include object class
  include_once 'anmaga/Comment.php';



/**
 * Skeleton subclass for performing query and update operations on the 'comment' table.
 *
 * Comentarios
 *
 * This class was autogenerated by Propel on:
 *
 * 12/05/07 13:19:20
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class CommentPeer extends BaseCommentPeer {

	/**
	* Crea un comentario nuevo.
	*
	* @param string $productRequestId id del product request al que pertenece el comentario
	* @param string $userId id de usuario (puede ser admin, supplier o affiliate)
	* @param string $text texto del comentario
	* @param integer $type tipo de comentario
	* @return objeto comentario creado o false en caso de error
	*/
	private function create($productRequestId,$userId,$text,$type) {
		$comment = new Comment();
		$comment->setProductRequestId($productRequestId);
		$comment->setUserId($userId);
		$comment->setText($text);
		$comment->setType($type);
		$date = date("Y-m-d H:i:s");
		$comment->setCreatedAt($date);
		try {
			$comment->save();
		}
		catch (Exception $exp) {
			return false;
		}
		return $comment;
	}


	/*
	 * Crea un comentario de Admin a Supplier
	 *
	 * @param string $productRequestId id del product request al que pertenece el comentario
	 * @param string $userId id de usuario (puede ser admin, supplier o affiliate)
	 * @param string $text texto del comentario
	 * @param integer $type tipo de comentario
	 * @return objeto comentario creado o false en caso de error
	 */	
	function createAdminToSupplierComment($productRequestId,$userId,$text) {
		return $this->create($productRequestId,$userId,$text,COMMENT_ADMIN_SUPPLIER);
	}

	/*
	 * Crea un comentario de Admin a Afiliado
	 *
	 * @param string $productRequestId id del product request al que pertenece el comentario
	 * @param string $userId id de usuario (puede ser admin, supplier o affiliate)
	 * @param string $text texto del comentario
	 * @param integer $type tipo de comentario
	 * @return objeto comentario creado o false en caso de error
	 */	
	function createAdminToUserComment($productRequestId,$userId,$text) {
		return $this->create($productRequestId,$userId,$text,COMMENT_ADMIN_USER);
	}

	/*
	 * Crea un comentario de Afiliado a Admin
	 *
	 * @param string $productRequestId id del product request al que pertenece el comentario
	 * @param string $userId id de usuario (puede ser admin, supplier o affiliate)
	 * @param string $text texto del comentario
	 * @param integer $type tipo de comentario
	 * @return objeto comentario creado o false en caso de error
	 */	
	function createUserToAdminComment($productRequestId,$userId,$text) {
		return $this->create($productRequestId,$userId,$text,COMMENT_USER_ADMIN);
	}

	/*
	 * Crea un comentario de Supplier a Admin
	 *
	 * @param string $productRequestId id del product request al que pertenece el comentario
	 * @param string $userId id de usuario (puede ser admin, supplier o affiliate)
	 * @param string $text texto del comentario
	 * @param integer $type tipo de comentario
	 * @return objeto comentario creado o false en caso de error
	 */	
	function createSupplierToAdminComment($productRequestId,$userId,$text) {
		return $this->create($productRequestId,$userId,$text,COMMENT_SUPPLIER_ADMIN);
	}
	
	/*
	 * Obtiene todo los comentarios para un determinado Product Request
	 * @param $productRequestId id de product request
	 * @return array de instancias de Comment
	 */
	function getAllFromProductRequest($productRequestId) {

		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(CommentPeer::CREATEDAT);
		$cond->add(CommentPeer::PRODUCTREQUESTID,$productRequestId);
		$result = CommentPeer::doSelect($cond);

		return $result;

	}

	/*
	 * Obtiene los comentarios para un determinado Product Request entre supplier y admin
	 * @param $productRequestId id de product request
	 * @return array de instancias de Comment
	 */
	function getAllFromProductRequestForSupplier($productRequestId,$supplierId) {
	
		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(CommentPeer::CREATEDAT);
		$cond->add(CommentPeer::PRODUCTREQUESTID,$productRequestId);
		$cond->add(CommentPeer::TYPE,COMMENT_SUPPLIER_ADMIN);
		$cond->addOr(CommentPeer::TYPE,COMMENT_ADMIN_SUPPLIER);
		$result = CommentPeer::doSelect($cond);

		return $result;
		
	}

	/*
	 * Obtiene los comentarios para un determinado Product Request entre usuario affiliate y admin
	 * @param $productRequestId id de product request
	 * @param 
	 * @return array de instancias de Comment
	 */
	function getAllFromProductRequestForAffiliateUser($productRequestId,$affiliateUserId) {

		$cond = new Criteria();
		$cond->addAscendingOrderByColumn(CommentPeer::CREATEDAT);
		$cond->add(CommentPeer::PRODUCTREQUESTID,$productRequestId);
		$cond->add(CommentPeer::TYPE,COMMENT_ADMIN_USER);
		$cond->addOr(CommentPeer::TYPE,COMMENT_USER_ADMIN);
		$result = CommentPeer::doSelect($cond);

		return $result;

	}



} // CommentPeer
