<?php

  // include base peer class
  require_once 'anmaga/om/BaseRequestPeer.php';

  // include object class
  include_once 'anmaga/Request.php';
  require_once('anmaga/ProductRequest.php');


/**
 * Skeleton subclass for performing query and update operations on the 'request' table.
 *
 * Requests
 *
 * This class was autogenerated by Propel on:
 *
 * 12/05/07 13:19:20
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class RequestPeer extends BaseRequestPeer {


	/*
	 * Crea una nueva request sin productos relacionados y con status NEW
	 * para un cierto userId
	 *
	 * @param $userId id de usuario para el que se le creara la request
	 * @returns el objeto request creado, o false en caso de error.
	 */
	function create($userId) {

		//creamos la nueva request
		$request = new Request();
		$datetime = date("Y-m-d H:i:s");
		$request->setCreatedAt($datetime);
		//TODO Status de Requests
		$request->setStatus('NEW');
		$request->setTimestampStatus($datetime);
		$request->setUserId($userId);

		//la guardamos
		try {
			$request->save();		
		}
		catch(PropelException $exp) {
			return false;
		}

		return $request;
		
	}

	/**
	* Obtiene la informacion de un request.
	*
	* @param int $id id del request
	* @return instancia de request
	*/
	function get($id) {
	
		$request = RequestPeer::retrieveByPK($id);
		return $request;
	}

	/**
	* Obtiene todas las products request relacionadas a un request.
	*
	* @param int $id id del request
	* @return array instancias de productRequest
	*/	
	function getAllProductRequests($requestId) {
	
		$crit = new Criteria();
		$crit->add(ProductRequestPeer::REQUESTID,$requestId);
		$result = ProductRequestPeer::doSelect($crit);
		return $result;
	
	}

	function getAllProductRequestsForSupplier($requestId,$supplierId) {

		$crit = new Criteria();
		$crit->add(ProductRequestPeer::REQUESTID,$requestId);
		$crit->add(ProductRequestPeer::SUPPLIERID,$supplierId);
		$result = ProductRequestPeer::doSelect($crit);
		return $result;

	}

	/**
	* Obtiene la cantidad de filas por pagina por defecto en los listado paginados.
	*
	* @return int Cantidad de filas por pagina
	*/
	function getRowsPerPage() {
		global $system;
		return $system["config"]["system"]["rowsPerPage"];
	}

	/**
	* Obtiene todas las requests a partir de un cierto criterio de propel.
	*
	* @param Criteria $crit Propel Criteria
	* @return array instancias de Request
	*/	
	private function getPaginated($crit,$page=1,$perPage=-1) {
	
		if ($perPage == -1)
			$perPage = RequestPeer::getRowsPerPage();		if (empty($page))
			$page = 1;
		require_once("propel/util/PropelPager.php");
		$pager = new PropelPager($crit,"RequestPeer", "doSelect",$page,$perPage);
		return $pager;
   	}    


	/**
	* Obtiene todas las requests a partir de un cierto criterio de propel.
	*
	* @param Criteria $crit Propel Criteria
	* @return array instancias de Request
	*/	
	function getAllPaginated($page=1,$perPage=-1) {
		$crit = new Criteria();	
		return $this->getPaginated($crit,$page,$perPage);
	}

	/**
	* Obtiene todas las requests para un cierto supplier
	*
	* @param Criteria $crit Propel Criteria
	* @return array instancias de Request
	* @TODO Join con tabla de producRequest para obtener aquellos request asignados al al supplier.
	*/	
	function getAllPaginatedBySupplier($supplierId,$page=1,$perPage=-1) {
		$crit = new Criteria();
		$crit->addJoin(RequestPeer::ID, ProductRequestPeer::REQUESTID, Criteria::LEFT_JOIN);
		$crit->addSelectColumn(RequestPeer::ID);
		$crit->addSelectColumn(RequestPeer::CREATEDAT);
		$crit->addSelectColumn(RequestPeer::USERID);
		$crit->addSelectColumn(RequestPeer::STATUS);
		$crit->addSelectColumn(RequestPeer::TIMESTAMPSTATUS);
		$crit->setDistinct();
		$crit->add(ProductRequestPeer::SUPPLIERID,$suppplierId);
		$crit->add(ProductRequestPeer::SUPPLIERID,null,Criteria::ISNOTNULL);
		return $this->getPaginated($crit,$page,$perPage);

	}

	/**
	* Obtiene todas las requests para un afiliado
	*
	* @param int $userId id de usuario afiliado.
	* @return array instancias de Request
	*/	
	function getAllPaginatedByUser($userId,$page=1,$perPage=-1) {
		$crit = new Criteria();	
		$crit->add(RequestPeer::USERID,$userId);		
		return $this->getPaginated($crit,$page,$perPage);

	}



} // RequestPeer
