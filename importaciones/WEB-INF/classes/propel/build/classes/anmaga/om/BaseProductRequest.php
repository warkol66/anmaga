<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'anmaga/ProductRequestPeer.php';

/**
 * Base class that represents a row from the 'productRequest' table.
 *
 * Products of each request
 *
 * This class was autogenerated by Propel on:
 *
 * 12/05/07 16:36:02
 *
 * @package    anmaga.om
 */
abstract class BaseProductRequest extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProductRequestPeer
	 */
	protected static $peer;


	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;


	/**
	 * The value for the requestid field.
	 * @var        int
	 */
	protected $requestid;


	/**
	 * The value for the productid field.
	 * @var        int
	 */
	protected $productid;


	/**
	 * The value for the supplierid field.
	 * @var        int
	 */
	protected $supplierid;


	/**
	 * The value for the quantity field.
	 * @var        int
	 */
	protected $quantity;


	/**
	 * The value for the pricesupplier field.
	 * @var        double
	 */
	protected $pricesupplier;


	/**
	 * The value for the timestamppricesupplier field.
	 * @var        int
	 */
	protected $timestamppricesupplier;


	/**
	 * The value for the priceclient field.
	 * @var        double
	 */
	protected $priceclient;


	/**
	 * The value for the timestamppriceclient field.
	 * @var        int
	 */
	protected $timestamppriceclient;


	/**
	 * The value for the incotermid field.
	 * @var        int
	 */
	protected $incotermid;


	/**
	 * The value for the portid field.
	 * @var        int
	 */
	protected $portid;


	/**
	 * The value for the status field.
	 * @var        int
	 */
	protected $status;


	/**
	 * The value for the timestampstatus field.
	 * @var        int
	 */
	protected $timestampstatus;

	/**
	 * @var        Request
	 */
	protected $aRequest;

	/**
	 * @var        Product
	 */
	protected $aProduct;

	/**
	 * @var        Supplier
	 */
	protected $aSupplier;

	/**
	 * @var        Incoterm
	 */
	protected $aIncoterm;

	/**
	 * @var        Port
	 */
	protected $aPort;

	/**
	 * Collection to store aggregation of collProductRequestConfirmations.
	 * @var        array
	 */
	protected $collProductRequestConfirmations;

	/**
	 * The criteria used to select the current contents of collProductRequestConfirmations.
	 * @var        Criteria
	 */
	protected $lastProductRequestConfirmationCriteria = null;

	/**
	 * Collection to store aggregation of collComments.
	 * @var        array
	 */
	protected $collComments;

	/**
	 * The criteria used to select the current contents of collComments.
	 * @var        Criteria
	 */
	protected $lastCommentCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * ProductRequest Id
	 * @return     int
	 */
	public function getId()
	{

		return $this->id;
	}

	/**
	 * Get the [requestid] column value.
	 * Request
	 * @return     int
	 */
	public function getRequestid()
	{

		return $this->requestid;
	}

	/**
	 * Get the [productid] column value.
	 * Product
	 * @return     int
	 */
	public function getProductid()
	{

		return $this->productid;
	}

	/**
	 * Get the [supplierid] column value.
	 * Supplier
	 * @return     int
	 */
	public function getSupplierid()
	{

		return $this->supplierid;
	}

	/**
	 * Get the [quantity] column value.
	 * Cantidad del producto en el pedido
	 * @return     int
	 */
	public function getQuantity()
	{

		return $this->quantity;
	}

	/**
	 * Get the [pricesupplier] column value.
	 * Precio del proveedor
	 * @return     double
	 */
	public function getPricesupplier()
	{

		return $this->pricesupplier;
	}

	/**
	 * Get the [optionally formatted] [timestamppricesupplier] column value.
	 * Fecha de la ultima modificacion del priceSupplier
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
	 * @return     mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws     PropelException - if unable to convert the date/time to timestamp.
	 */
	public function getTimestamppricesupplier($format = 'Y-m-d H:i:s')
	{

		if ($this->timestamppricesupplier === null || $this->timestamppricesupplier === '') {
			return null;
		} elseif (!is_int($this->timestamppricesupplier)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->timestamppricesupplier);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse value of [timestamppricesupplier] as date/time value: " . var_export($this->timestamppricesupplier, true));
			}
		} else {
			$ts = $this->timestamppricesupplier;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	/**
	 * Get the [priceclient] column value.
	 * Precio para el cliente
	 * @return     double
	 */
	public function getPriceclient()
	{

		return $this->priceclient;
	}

	/**
	 * Get the [optionally formatted] [timestamppriceclient] column value.
	 * Fecha de la ultima modificacion del priceClient
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
	 * @return     mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws     PropelException - if unable to convert the date/time to timestamp.
	 */
	public function getTimestamppriceclient($format = 'Y-m-d H:i:s')
	{

		if ($this->timestamppriceclient === null || $this->timestamppriceclient === '') {
			return null;
		} elseif (!is_int($this->timestamppriceclient)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->timestamppriceclient);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse value of [timestamppriceclient] as date/time value: " . var_export($this->timestamppriceclient, true));
			}
		} else {
			$ts = $this->timestamppriceclient;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	/**
	 * Get the [incotermid] column value.
	 * Icoterm
	 * @return     int
	 */
	public function getIncotermid()
	{

		return $this->incotermid;
	}

	/**
	 * Get the [portid] column value.
	 * Port
	 * @return     int
	 */
	public function getPortid()
	{

		return $this->portid;
	}

	/**
	 * Get the [status] column value.
	 * Request Status
	 * @return     int
	 */
	public function getStatus()
	{

		return $this->status;
	}

	/**
	 * Get the [optionally formatted] [timestampstatus] column value.
	 * Fecha del ultimo cambio de status
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
	 * @return     mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws     PropelException - if unable to convert the date/time to timestamp.
	 */
	public function getTimestampstatus($format = 'Y-m-d H:i:s')
	{

		if ($this->timestampstatus === null || $this->timestampstatus === '') {
			return null;
		} elseif (!is_int($this->timestampstatus)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->timestampstatus);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse value of [timestampstatus] as date/time value: " . var_export($this->timestampstatus, true));
			}
		} else {
			$ts = $this->timestampstatus;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	/**
	 * Set the value of [id] column.
	 * ProductRequest Id
	 * @param      int $v new value
	 * @return     void
	 */
	public function setId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProductRequestPeer::ID;
		}

	} // setId()

	/**
	 * Set the value of [requestid] column.
	 * Request
	 * @param      int $v new value
	 * @return     void
	 */
	public function setRequestid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->requestid !== $v) {
			$this->requestid = $v;
			$this->modifiedColumns[] = ProductRequestPeer::REQUESTID;
		}

		if ($this->aRequest !== null && $this->aRequest->getId() !== $v) {
			$this->aRequest = null;
		}

	} // setRequestid()

	/**
	 * Set the value of [productid] column.
	 * Product
	 * @param      int $v new value
	 * @return     void
	 */
	public function setProductid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->productid !== $v) {
			$this->productid = $v;
			$this->modifiedColumns[] = ProductRequestPeer::PRODUCTID;
		}

		if ($this->aProduct !== null && $this->aProduct->getId() !== $v) {
			$this->aProduct = null;
		}

	} // setProductid()

	/**
	 * Set the value of [supplierid] column.
	 * Supplier
	 * @param      int $v new value
	 * @return     void
	 */
	public function setSupplierid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->supplierid !== $v) {
			$this->supplierid = $v;
			$this->modifiedColumns[] = ProductRequestPeer::SUPPLIERID;
		}

		if ($this->aSupplier !== null && $this->aSupplier->getId() !== $v) {
			$this->aSupplier = null;
		}

	} // setSupplierid()

	/**
	 * Set the value of [quantity] column.
	 * Cantidad del producto en el pedido
	 * @param      int $v new value
	 * @return     void
	 */
	public function setQuantity($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->quantity !== $v) {
			$this->quantity = $v;
			$this->modifiedColumns[] = ProductRequestPeer::QUANTITY;
		}

	} // setQuantity()

	/**
	 * Set the value of [pricesupplier] column.
	 * Precio del proveedor
	 * @param      double $v new value
	 * @return     void
	 */
	public function setPricesupplier($v)
	{

		if ($this->pricesupplier !== $v) {
			$this->pricesupplier = $v;
			$this->modifiedColumns[] = ProductRequestPeer::PRICESUPPLIER;
		}

	} // setPricesupplier()

	/**
	 * Set the value of [timestamppricesupplier] column.
	 * Fecha de la ultima modificacion del priceSupplier
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTimestamppricesupplier($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse date/time value for [timestamppricesupplier] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->timestamppricesupplier !== $ts) {
			$this->timestamppricesupplier = $ts;
			$this->modifiedColumns[] = ProductRequestPeer::TIMESTAMPPRICESUPPLIER;
		}

	} // setTimestamppricesupplier()

	/**
	 * Set the value of [priceclient] column.
	 * Precio para el cliente
	 * @param      double $v new value
	 * @return     void
	 */
	public function setPriceclient($v)
	{

		if ($this->priceclient !== $v) {
			$this->priceclient = $v;
			$this->modifiedColumns[] = ProductRequestPeer::PRICECLIENT;
		}

	} // setPriceclient()

	/**
	 * Set the value of [timestamppriceclient] column.
	 * Fecha de la ultima modificacion del priceClient
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTimestamppriceclient($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse date/time value for [timestamppriceclient] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->timestamppriceclient !== $ts) {
			$this->timestamppriceclient = $ts;
			$this->modifiedColumns[] = ProductRequestPeer::TIMESTAMPPRICECLIENT;
		}

	} // setTimestamppriceclient()

	/**
	 * Set the value of [incotermid] column.
	 * Icoterm
	 * @param      int $v new value
	 * @return     void
	 */
	public function setIncotermid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->incotermid !== $v) {
			$this->incotermid = $v;
			$this->modifiedColumns[] = ProductRequestPeer::INCOTERMID;
		}

		if ($this->aIncoterm !== null && $this->aIncoterm->getId() !== $v) {
			$this->aIncoterm = null;
		}

	} // setIncotermid()

	/**
	 * Set the value of [portid] column.
	 * Port
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPortid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->portid !== $v) {
			$this->portid = $v;
			$this->modifiedColumns[] = ProductRequestPeer::PORTID;
		}

		if ($this->aPort !== null && $this->aPort->getId() !== $v) {
			$this->aPort = null;
		}

	} // setPortid()

	/**
	 * Set the value of [status] column.
	 * Request Status
	 * @param      int $v new value
	 * @return     void
	 */
	public function setStatus($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = ProductRequestPeer::STATUS;
		}

	} // setStatus()

	/**
	 * Set the value of [timestampstatus] column.
	 * Fecha del ultimo cambio de status
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTimestampstatus($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse date/time value for [timestampstatus] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->timestampstatus !== $ts) {
			$this->timestampstatus = $ts;
			$this->modifiedColumns[] = ProductRequestPeer::TIMESTAMPSTATUS;
		}

	} // setTimestampstatus()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->id = $rs->getInt($startcol + 0);

			$this->requestid = $rs->getInt($startcol + 1);

			$this->productid = $rs->getInt($startcol + 2);

			$this->supplierid = $rs->getInt($startcol + 3);

			$this->quantity = $rs->getInt($startcol + 4);

			$this->pricesupplier = $rs->getFloat($startcol + 5);

			$this->timestamppricesupplier = $rs->getTimestamp($startcol + 6, null);

			$this->priceclient = $rs->getFloat($startcol + 7);

			$this->timestamppriceclient = $rs->getTimestamp($startcol + 8, null);

			$this->incotermid = $rs->getInt($startcol + 9);

			$this->portid = $rs->getInt($startcol + 10);

			$this->status = $rs->getInt($startcol + 11);

			$this->timestampstatus = $rs->getTimestamp($startcol + 12, null);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = ProductRequestPeer::NUM_COLUMNS - ProductRequestPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ProductRequest object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductRequestPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			ProductRequestPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProductRequestPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRequest !== null) {
				if ($this->aRequest->isModified()) {
					$affectedRows += $this->aRequest->save($con);
				}
				$this->setRequest($this->aRequest);
			}

			if ($this->aProduct !== null) {
				if ($this->aProduct->isModified()) {
					$affectedRows += $this->aProduct->save($con);
				}
				$this->setProduct($this->aProduct);
			}

			if ($this->aSupplier !== null) {
				if ($this->aSupplier->isModified()) {
					$affectedRows += $this->aSupplier->save($con);
				}
				$this->setSupplier($this->aSupplier);
			}

			if ($this->aIncoterm !== null) {
				if ($this->aIncoterm->isModified()) {
					$affectedRows += $this->aIncoterm->save($con);
				}
				$this->setIncoterm($this->aIncoterm);
			}

			if ($this->aPort !== null) {
				if ($this->aPort->isModified()) {
					$affectedRows += $this->aPort->save($con);
				}
				$this->setPort($this->aPort);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProductRequestPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProductRequestPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collProductRequestConfirmations !== null) {
				foreach($this->collProductRequestConfirmations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collComments !== null) {
				foreach($this->collComments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRequest !== null) {
				if (!$this->aRequest->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRequest->getValidationFailures());
				}
			}

			if ($this->aProduct !== null) {
				if (!$this->aProduct->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProduct->getValidationFailures());
				}
			}

			if ($this->aSupplier !== null) {
				if (!$this->aSupplier->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSupplier->getValidationFailures());
				}
			}

			if ($this->aIncoterm !== null) {
				if (!$this->aIncoterm->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aIncoterm->getValidationFailures());
				}
			}

			if ($this->aPort !== null) {
				if (!$this->aPort->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPort->getValidationFailures());
				}
			}


			if (($retval = ProductRequestPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collProductRequestConfirmations !== null) {
					foreach($this->collProductRequestConfirmations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collComments !== null) {
					foreach($this->collComments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProductRequestPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProductRequestPeer::ID)) $criteria->add(ProductRequestPeer::ID, $this->id);
		if ($this->isColumnModified(ProductRequestPeer::REQUESTID)) $criteria->add(ProductRequestPeer::REQUESTID, $this->requestid);
		if ($this->isColumnModified(ProductRequestPeer::PRODUCTID)) $criteria->add(ProductRequestPeer::PRODUCTID, $this->productid);
		if ($this->isColumnModified(ProductRequestPeer::SUPPLIERID)) $criteria->add(ProductRequestPeer::SUPPLIERID, $this->supplierid);
		if ($this->isColumnModified(ProductRequestPeer::QUANTITY)) $criteria->add(ProductRequestPeer::QUANTITY, $this->quantity);
		if ($this->isColumnModified(ProductRequestPeer::PRICESUPPLIER)) $criteria->add(ProductRequestPeer::PRICESUPPLIER, $this->pricesupplier);
		if ($this->isColumnModified(ProductRequestPeer::TIMESTAMPPRICESUPPLIER)) $criteria->add(ProductRequestPeer::TIMESTAMPPRICESUPPLIER, $this->timestamppricesupplier);
		if ($this->isColumnModified(ProductRequestPeer::PRICECLIENT)) $criteria->add(ProductRequestPeer::PRICECLIENT, $this->priceclient);
		if ($this->isColumnModified(ProductRequestPeer::TIMESTAMPPRICECLIENT)) $criteria->add(ProductRequestPeer::TIMESTAMPPRICECLIENT, $this->timestamppriceclient);
		if ($this->isColumnModified(ProductRequestPeer::INCOTERMID)) $criteria->add(ProductRequestPeer::INCOTERMID, $this->incotermid);
		if ($this->isColumnModified(ProductRequestPeer::PORTID)) $criteria->add(ProductRequestPeer::PORTID, $this->portid);
		if ($this->isColumnModified(ProductRequestPeer::STATUS)) $criteria->add(ProductRequestPeer::STATUS, $this->status);
		if ($this->isColumnModified(ProductRequestPeer::TIMESTAMPSTATUS)) $criteria->add(ProductRequestPeer::TIMESTAMPSTATUS, $this->timestampstatus);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProductRequestPeer::DATABASE_NAME);

		$criteria->add(ProductRequestPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ProductRequest (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setRequestid($this->requestid);

		$copyObj->setProductid($this->productid);

		$copyObj->setSupplierid($this->supplierid);

		$copyObj->setQuantity($this->quantity);

		$copyObj->setPricesupplier($this->pricesupplier);

		$copyObj->setTimestamppricesupplier($this->timestamppricesupplier);

		$copyObj->setPriceclient($this->priceclient);

		$copyObj->setTimestamppriceclient($this->timestamppriceclient);

		$copyObj->setIncotermid($this->incotermid);

		$copyObj->setPortid($this->portid);

		$copyObj->setStatus($this->status);

		$copyObj->setTimestampstatus($this->timestampstatus);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach($this->getProductRequestConfirmations() as $relObj) {
				$copyObj->addProductRequestConfirmation($relObj->copy($deepCopy));
			}

			foreach($this->getComments() as $relObj) {
				$copyObj->addComment($relObj->copy($deepCopy));
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ProductRequest Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProductRequestPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProductRequestPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Request object.
	 *
	 * @param      Request $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setRequest($v)
	{


		if ($v === null) {
			$this->setRequestid(NULL);
		} else {
			$this->setRequestid($v->getId());
		}


		$this->aRequest = $v;
	}


	/**
	 * Get the associated Request object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Request The associated Request object.
	 * @throws     PropelException
	 */
	public function getRequest($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseRequestPeer.php';

		if ($this->aRequest === null && ($this->requestid !== null)) {

			$this->aRequest = RequestPeer::retrieveByPK($this->requestid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = RequestPeer::retrieveByPK($this->requestid, $con);
			   $obj->addRequests($this);
			 */
		}
		return $this->aRequest;
	}

	/**
	 * Declares an association between this object and a Product object.
	 *
	 * @param      Product $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setProduct($v)
	{


		if ($v === null) {
			$this->setProductid(NULL);
		} else {
			$this->setProductid($v->getId());
		}


		$this->aProduct = $v;
	}


	/**
	 * Get the associated Product object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Product The associated Product object.
	 * @throws     PropelException
	 */
	public function getProduct($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseProductPeer.php';

		if ($this->aProduct === null && ($this->productid !== null)) {

			$this->aProduct = ProductPeer::retrieveByPK($this->productid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = ProductPeer::retrieveByPK($this->productid, $con);
			   $obj->addProducts($this);
			 */
		}
		return $this->aProduct;
	}

	/**
	 * Declares an association between this object and a Supplier object.
	 *
	 * @param      Supplier $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setSupplier($v)
	{


		if ($v === null) {
			$this->setSupplierid(NULL);
		} else {
			$this->setSupplierid($v->getId());
		}


		$this->aSupplier = $v;
	}


	/**
	 * Get the associated Supplier object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Supplier The associated Supplier object.
	 * @throws     PropelException
	 */
	public function getSupplier($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseSupplierPeer.php';

		if ($this->aSupplier === null && ($this->supplierid !== null)) {

			$this->aSupplier = SupplierPeer::retrieveByPK($this->supplierid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = SupplierPeer::retrieveByPK($this->supplierid, $con);
			   $obj->addSuppliers($this);
			 */
		}
		return $this->aSupplier;
	}

	/**
	 * Declares an association between this object and a Incoterm object.
	 *
	 * @param      Incoterm $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setIncoterm($v)
	{


		if ($v === null) {
			$this->setIncotermid(NULL);
		} else {
			$this->setIncotermid($v->getId());
		}


		$this->aIncoterm = $v;
	}


	/**
	 * Get the associated Incoterm object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Incoterm The associated Incoterm object.
	 * @throws     PropelException
	 */
	public function getIncoterm($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseIncotermPeer.php';

		if ($this->aIncoterm === null && ($this->incotermid !== null)) {

			$this->aIncoterm = IncotermPeer::retrieveByPK($this->incotermid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = IncotermPeer::retrieveByPK($this->incotermid, $con);
			   $obj->addIncoterms($this);
			 */
		}
		return $this->aIncoterm;
	}

	/**
	 * Declares an association between this object and a Port object.
	 *
	 * @param      Port $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setPort($v)
	{


		if ($v === null) {
			$this->setPortid(NULL);
		} else {
			$this->setPortid($v->getId());
		}


		$this->aPort = $v;
	}


	/**
	 * Get the associated Port object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Port The associated Port object.
	 * @throws     PropelException
	 */
	public function getPort($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BasePortPeer.php';

		if ($this->aPort === null && ($this->portid !== null)) {

			$this->aPort = PortPeer::retrieveByPK($this->portid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = PortPeer::retrieveByPK($this->portid, $con);
			   $obj->addPorts($this);
			 */
		}
		return $this->aPort;
	}

	/**
	 * Temporary storage of collProductRequestConfirmations to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initProductRequestConfirmations()
	{
		if ($this->collProductRequestConfirmations === null) {
			$this->collProductRequestConfirmations = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ProductRequest has previously
	 * been saved, it will retrieve related ProductRequestConfirmations from storage.
	 * If this ProductRequest is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getProductRequestConfirmations($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/om/BaseProductRequestConfirmationPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductRequestConfirmations === null) {
			if ($this->isNew()) {
			   $this->collProductRequestConfirmations = array();
			} else {

				$criteria->add(ProductRequestConfirmationPeer::PRODUCTREQUESTID, $this->getId());

				ProductRequestConfirmationPeer::addSelectColumns($criteria);
				$this->collProductRequestConfirmations = ProductRequestConfirmationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductRequestConfirmationPeer::PRODUCTREQUESTID, $this->getId());

				ProductRequestConfirmationPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductRequestConfirmationCriteria) || !$this->lastProductRequestConfirmationCriteria->equals($criteria)) {
					$this->collProductRequestConfirmations = ProductRequestConfirmationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductRequestConfirmationCriteria = $criteria;
		return $this->collProductRequestConfirmations;
	}

	/**
	 * Returns the number of related ProductRequestConfirmations.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countProductRequestConfirmations($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/om/BaseProductRequestConfirmationPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(ProductRequestConfirmationPeer::PRODUCTREQUESTID, $this->getId());

		return ProductRequestConfirmationPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a ProductRequestConfirmation object to this object
	 * through the ProductRequestConfirmation foreign key attribute
	 *
	 * @param      ProductRequestConfirmation $l ProductRequestConfirmation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProductRequestConfirmation(ProductRequestConfirmation $l)
	{
		$this->collProductRequestConfirmations[] = $l;
		$l->setProductRequest($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ProductRequest is new, it will return
	 * an empty collection; or if this ProductRequest has previously
	 * been saved, it will retrieve related ProductRequestConfirmations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ProductRequest.
	 */
	public function getProductRequestConfirmationsJoinAffiliateUser($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/om/BaseProductRequestConfirmationPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductRequestConfirmations === null) {
			if ($this->isNew()) {
				$this->collProductRequestConfirmations = array();
			} else {

				$criteria->add(ProductRequestConfirmationPeer::PRODUCTREQUESTID, $this->getId());

				$this->collProductRequestConfirmations = ProductRequestConfirmationPeer::doSelectJoinAffiliateUser($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductRequestConfirmationPeer::PRODUCTREQUESTID, $this->getId());

			if (!isset($this->lastProductRequestConfirmationCriteria) || !$this->lastProductRequestConfirmationCriteria->equals($criteria)) {
				$this->collProductRequestConfirmations = ProductRequestConfirmationPeer::doSelectJoinAffiliateUser($criteria, $con);
			}
		}
		$this->lastProductRequestConfirmationCriteria = $criteria;

		return $this->collProductRequestConfirmations;
	}

	/**
	 * Temporary storage of collComments to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initComments()
	{
		if ($this->collComments === null) {
			$this->collComments = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ProductRequest has previously
	 * been saved, it will retrieve related Comments from storage.
	 * If this ProductRequest is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getComments($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/om/BaseCommentPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collComments === null) {
			if ($this->isNew()) {
			   $this->collComments = array();
			} else {

				$criteria->add(CommentPeer::PRODUCTREQUESTID, $this->getId());

				CommentPeer::addSelectColumns($criteria);
				$this->collComments = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::PRODUCTREQUESTID, $this->getId());

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
					$this->collComments = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentCriteria = $criteria;
		return $this->collComments;
	}

	/**
	 * Returns the number of related Comments.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countComments($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'anmaga/om/BaseCommentPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(CommentPeer::PRODUCTREQUESTID, $this->getId());

		return CommentPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addComment(Comment $l)
	{
		$this->collComments[] = $l;
		$l->setProductRequest($this);
	}

} // BaseProductRequest
