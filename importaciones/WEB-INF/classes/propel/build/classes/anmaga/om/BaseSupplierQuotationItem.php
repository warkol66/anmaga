<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'anmaga/SupplierQuotationItemPeer.php';

/**
 * Base class that represents a row from the 'import_supplierQuotationItem' table.
 *
 * Elemento de Cotizacion de Proveedor
 *
 * This class was autogenerated by Propel on:
 *
 * Wed Feb  4 14:12:35 2009
 *
 * @package    anmaga.om
 */
abstract class BaseSupplierQuotationItem extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SupplierQuotationItemPeer
	 */
	protected static $peer;


	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;


	/**
	 * The value for the supplierquotationid field.
	 * @var        int
	 */
	protected $supplierquotationid;


	/**
	 * The value for the productid field.
	 * @var        int
	 */
	protected $productid;


	/**
	 * The value for the clientquotationitemid field.
	 * @var        int
	 */
	protected $clientquotationitemid;


	/**
	 * The value for the price field.
	 * @var        int
	 */
	protected $price;


	/**
	 * The value for the quantity field.
	 * @var        int
	 */
	protected $quantity;


	/**
	 * The value for the portid field.
	 * @var        int
	 */
	protected $portid;


	/**
	 * The value for the incotermid field.
	 * @var        int
	 */
	protected $incotermid;

	/**
	 * @var        SupplierQuotation
	 */
	protected $aSupplierQuotation;

	/**
	 * @var        ClientQuotationItem
	 */
	protected $aClientQuotationItem;

	/**
	 * @var        Product
	 */
	protected $aProduct;

	/**
	 * @var        Incoterm
	 */
	protected $aIncoterm;

	/**
	 * @var        Port
	 */
	protected $aPort;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * Id elemento de cotizacion de proveedor
	 * @return     int
	 */
	public function getId()
	{

		return $this->id;
	}

	/**
	 * Get the [supplierquotationid] column value.
	 * Id de cotizacion de proveedor
	 * @return     int
	 */
	public function getSupplierquotationid()
	{

		return $this->supplierquotationid;
	}

	/**
	 * Get the [productid] column value.
	 * Id producto
	 * @return     int
	 */
	public function getProductid()
	{

		return $this->productid;
	}

	/**
	 * Get the [clientquotationitemid] column value.
	 * Id de cotizacion de proveedor
	 * @return     int
	 */
	public function getClientquotationitemid()
	{

		return $this->clientquotationitemid;
	}

	/**
	 * Get the [price] column value.
	 * precio de producto
	 * @return     int
	 */
	public function getPrice()
	{

		return $this->price;
	}

	/**
	 * Get the [quantity] column value.
	 * cantidad producto
	 * @return     int
	 */
	public function getQuantity()
	{

		return $this->quantity;
	}

	/**
	 * Get the [portid] column value.
	 * id de puerto
	 * @return     int
	 */
	public function getPortid()
	{

		return $this->portid;
	}

	/**
	 * Get the [incotermid] column value.
	 * id de incoterm
	 * @return     int
	 */
	public function getIncotermid()
	{

		return $this->incotermid;
	}

	/**
	 * Set the value of [id] column.
	 * Id elemento de cotizacion de proveedor
	 * @param      int $v new value
	 * @return     void
	 */
	public function setId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::ID;
		}

	} // setId()

	/**
	 * Set the value of [supplierquotationid] column.
	 * Id de cotizacion de proveedor
	 * @param      int $v new value
	 * @return     void
	 */
	public function setSupplierquotationid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->supplierquotationid !== $v) {
			$this->supplierquotationid = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::SUPPLIERQUOTATIONID;
		}

		if ($this->aSupplierQuotation !== null && $this->aSupplierQuotation->getId() !== $v) {
			$this->aSupplierQuotation = null;
		}

	} // setSupplierquotationid()

	/**
	 * Set the value of [productid] column.
	 * Id producto
	 * @param      int $v new value
	 * @return     void
	 */
	public function setProductid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->productid !== $v) {
			$this->productid = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::PRODUCTID;
		}

		if ($this->aProduct !== null && $this->aProduct->getId() !== $v) {
			$this->aProduct = null;
		}

	} // setProductid()

	/**
	 * Set the value of [clientquotationitemid] column.
	 * Id de cotizacion de proveedor
	 * @param      int $v new value
	 * @return     void
	 */
	public function setClientquotationitemid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->clientquotationitemid !== $v) {
			$this->clientquotationitemid = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::CLIENTQUOTATIONITEMID;
		}

		if ($this->aClientQuotationItem !== null && $this->aClientQuotationItem->getId() !== $v) {
			$this->aClientQuotationItem = null;
		}

	} // setClientquotationitemid()

	/**
	 * Set the value of [price] column.
	 * precio de producto
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPrice($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->price !== $v) {
			$this->price = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::PRICE;
		}

	} // setPrice()

	/**
	 * Set the value of [quantity] column.
	 * cantidad producto
	 * @param      int $v new value
	 * @return     void
	 */
	public function setQuantity($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->quantity !== $v) {
			$this->quantity = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::QUANTITY;
		}

	} // setQuantity()

	/**
	 * Set the value of [portid] column.
	 * id de puerto
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPortid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->portid !== $v) {
			$this->portid = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::PORTID;
		}

		if ($this->aPort !== null && $this->aPort->getId() !== $v) {
			$this->aPort = null;
		}

	} // setPortid()

	/**
	 * Set the value of [incotermid] column.
	 * id de incoterm
	 * @param      int $v new value
	 * @return     void
	 */
	public function setIncotermid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->incotermid !== $v) {
			$this->incotermid = $v;
			$this->modifiedColumns[] = SupplierQuotationItemPeer::INCOTERMID;
		}

		if ($this->aIncoterm !== null && $this->aIncoterm->getId() !== $v) {
			$this->aIncoterm = null;
		}

	} // setIncotermid()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->id = $rs->getInt($startcol + 0);

			$this->supplierquotationid = $rs->getInt($startcol + 1);

			$this->productid = $rs->getInt($startcol + 2);

			$this->clientquotationitemid = $rs->getInt($startcol + 3);

			$this->price = $rs->getInt($startcol + 4);

			$this->quantity = $rs->getInt($startcol + 5);

			$this->portid = $rs->getInt($startcol + 6);

			$this->incotermid = $rs->getInt($startcol + 7);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 8; // 8 = SupplierQuotationItemPeer::NUM_COLUMNS - SupplierQuotationItemPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SupplierQuotationItem object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SupplierQuotationItemPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			SupplierQuotationItemPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SupplierQuotationItemPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSupplierQuotation !== null) {
				if ($this->aSupplierQuotation->isModified()) {
					$affectedRows += $this->aSupplierQuotation->save($con);
				}
				$this->setSupplierQuotation($this->aSupplierQuotation);
			}

			if ($this->aClientQuotationItem !== null) {
				if ($this->aClientQuotationItem->isModified()) {
					$affectedRows += $this->aClientQuotationItem->save($con);
				}
				$this->setClientQuotationItem($this->aClientQuotationItem);
			}

			if ($this->aProduct !== null) {
				if ($this->aProduct->isModified()) {
					$affectedRows += $this->aProduct->save($con);
				}
				$this->setProduct($this->aProduct);
			}

			if ($this->aIncoterm !== null) {
				if ($this->aIncoterm->isModified()) {
					$affectedRows += $this->aIncoterm->save($con);
				}
				$this->setIncoterm($this->aIncoterm);
			}

			if ($this->aPort !== null) {
				if ($this->aPort->isModified()) {
					$affectedRows += $this->aPort->save($con);
				}
				$this->setPort($this->aPort);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SupplierQuotationItemPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SupplierQuotationItemPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSupplierQuotation !== null) {
				if (!$this->aSupplierQuotation->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSupplierQuotation->getValidationFailures());
				}
			}

			if ($this->aClientQuotationItem !== null) {
				if (!$this->aClientQuotationItem->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aClientQuotationItem->getValidationFailures());
				}
			}

			if ($this->aProduct !== null) {
				if (!$this->aProduct->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProduct->getValidationFailures());
				}
			}

			if ($this->aIncoterm !== null) {
				if (!$this->aIncoterm->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aIncoterm->getValidationFailures());
				}
			}

			if ($this->aPort !== null) {
				if (!$this->aPort->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPort->getValidationFailures());
				}
			}


			if (($retval = SupplierQuotationItemPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SupplierQuotationItemPeer::DATABASE_NAME);

		if ($this->isColumnModified(SupplierQuotationItemPeer::ID)) $criteria->add(SupplierQuotationItemPeer::ID, $this->id);
		if ($this->isColumnModified(SupplierQuotationItemPeer::SUPPLIERQUOTATIONID)) $criteria->add(SupplierQuotationItemPeer::SUPPLIERQUOTATIONID, $this->supplierquotationid);
		if ($this->isColumnModified(SupplierQuotationItemPeer::PRODUCTID)) $criteria->add(SupplierQuotationItemPeer::PRODUCTID, $this->productid);
		if ($this->isColumnModified(SupplierQuotationItemPeer::CLIENTQUOTATIONITEMID)) $criteria->add(SupplierQuotationItemPeer::CLIENTQUOTATIONITEMID, $this->clientquotationitemid);
		if ($this->isColumnModified(SupplierQuotationItemPeer::PRICE)) $criteria->add(SupplierQuotationItemPeer::PRICE, $this->price);
		if ($this->isColumnModified(SupplierQuotationItemPeer::QUANTITY)) $criteria->add(SupplierQuotationItemPeer::QUANTITY, $this->quantity);
		if ($this->isColumnModified(SupplierQuotationItemPeer::PORTID)) $criteria->add(SupplierQuotationItemPeer::PORTID, $this->portid);
		if ($this->isColumnModified(SupplierQuotationItemPeer::INCOTERMID)) $criteria->add(SupplierQuotationItemPeer::INCOTERMID, $this->incotermid);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SupplierQuotationItemPeer::DATABASE_NAME);

		$criteria->add(SupplierQuotationItemPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of SupplierQuotationItem (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSupplierquotationid($this->supplierquotationid);

		$copyObj->setProductid($this->productid);

		$copyObj->setClientquotationitemid($this->clientquotationitemid);

		$copyObj->setPrice($this->price);

		$copyObj->setQuantity($this->quantity);

		$copyObj->setPortid($this->portid);

		$copyObj->setIncotermid($this->incotermid);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     SupplierQuotationItem Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SupplierQuotationItemPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SupplierQuotationItemPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a SupplierQuotation object.
	 *
	 * @param      SupplierQuotation $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setSupplierQuotation($v)
	{


		if ($v === null) {
			$this->setSupplierquotationid(NULL);
		} else {
			$this->setSupplierquotationid($v->getId());
		}


		$this->aSupplierQuotation = $v;
	}


	/**
	 * Get the associated SupplierQuotation object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     SupplierQuotation The associated SupplierQuotation object.
	 * @throws     PropelException
	 */
	public function getSupplierQuotation($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseSupplierQuotationPeer.php';

		if ($this->aSupplierQuotation === null && ($this->supplierquotationid !== null)) {

			$this->aSupplierQuotation = SupplierQuotationPeer::retrieveByPK($this->supplierquotationid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = SupplierQuotationPeer::retrieveByPK($this->supplierquotationid, $con);
			   $obj->addSupplierQuotations($this);
			 */
		}
		return $this->aSupplierQuotation;
	}

	/**
	 * Declares an association between this object and a ClientQuotationItem object.
	 *
	 * @param      ClientQuotationItem $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setClientQuotationItem($v)
	{


		if ($v === null) {
			$this->setClientquotationitemid(NULL);
		} else {
			$this->setClientquotationitemid($v->getId());
		}


		$this->aClientQuotationItem = $v;
	}


	/**
	 * Get the associated ClientQuotationItem object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     ClientQuotationItem The associated ClientQuotationItem object.
	 * @throws     PropelException
	 */
	public function getClientQuotationItem($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseClientQuotationItemPeer.php';

		if ($this->aClientQuotationItem === null && ($this->clientquotationitemid !== null)) {

			$this->aClientQuotationItem = ClientQuotationItemPeer::retrieveByPK($this->clientquotationitemid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = ClientQuotationItemPeer::retrieveByPK($this->clientquotationitemid, $con);
			   $obj->addClientQuotationItems($this);
			 */
		}
		return $this->aClientQuotationItem;
	}

	/**
	 * Declares an association between this object and a Product object.
	 *
	 * @param      Product $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setProduct($v)
	{


		if ($v === null) {
			$this->setProductid(NULL);
		} else {
			$this->setProductid($v->getId());
		}


		$this->aProduct = $v;
	}


	/**
	 * Get the associated Product object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Product The associated Product object.
	 * @throws     PropelException
	 */
	public function getProduct($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseProductPeer.php';

		if ($this->aProduct === null && ($this->productid !== null)) {

			$this->aProduct = ProductPeer::retrieveByPK($this->productid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = ProductPeer::retrieveByPK($this->productid, $con);
			   $obj->addProducts($this);
			 */
		}
		return $this->aProduct;
	}

	/**
	 * Declares an association between this object and a Incoterm object.
	 *
	 * @param      Incoterm $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setIncoterm($v)
	{


		if ($v === null) {
			$this->setIncotermid(NULL);
		} else {
			$this->setIncotermid($v->getId());
		}


		$this->aIncoterm = $v;
	}


	/**
	 * Get the associated Incoterm object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Incoterm The associated Incoterm object.
	 * @throws     PropelException
	 */
	public function getIncoterm($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BaseIncotermPeer.php';

		if ($this->aIncoterm === null && ($this->incotermid !== null)) {

			$this->aIncoterm = IncotermPeer::retrieveByPK($this->incotermid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = IncotermPeer::retrieveByPK($this->incotermid, $con);
			   $obj->addIncoterms($this);
			 */
		}
		return $this->aIncoterm;
	}

	/**
	 * Declares an association between this object and a Port object.
	 *
	 * @param      Port $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setPort($v)
	{


		if ($v === null) {
			$this->setPortid(NULL);
		} else {
			$this->setPortid($v->getId());
		}


		$this->aPort = $v;
	}


	/**
	 * Get the associated Port object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Port The associated Port object.
	 * @throws     PropelException
	 */
	public function getPort($con = null)
	{
		// include the related Peer class
		include_once 'anmaga/om/BasePortPeer.php';

		if ($this->aPort === null && ($this->portid !== null)) {

			$this->aPort = PortPeer::retrieveByPK($this->portid, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = PortPeer::retrieveByPK($this->portid, $con);
			   $obj->addPorts($this);
			 */
		}
		return $this->aPort;
	}

} // BaseSupplierQuotationItem
